<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


include('/jagg/jagg.jag');
var method = request.getMethod();
var policyApi = require('/modules/policies-api.js');

usage = policyApi.getCacheHitMiss(request.getParameter("startDate"),request.getParameter("endDate"));

usage = parse(stringify(usage));

var webapps = [];

for(x=0;x<usage.length;x++){

    var userIndex = -1;
    var webappIndex = -1;
    var webappVersionIndex = -1;
    var webresourceIndex = -1;


    for(y=0;y<webapps.length;y++){

        if(webapps[y][0] == usage[x].time){
            userIndex = y;
            var z;
            for(z=0;z<webapps[y][1].length;z++){
                if(webapps[y][1][z][0] == usage[x].cachetHit){
                    webappIndex = z;
                    var t;
                    for(t=0;t<webapps[y][1][z][1].length;t++){
                        if(webapps[y][1][z][1][t][0] == usage[x].apiName){
                            webappVersionIndex = t;
                            var r;
                                for(r=0;r<webapps[y][1][z][1][t][1].length;r++){
                                    if(webapps[y][1][z][1][t][1][r][0] == usage[x].version){
                                        webresourceIndex = r;
                                        break;

                                    }


                                }

                        }
                    }
                }
            }
            if((webappVersionIndex == -1) && (z == webapps[y].length)){
                break;
            }
        }
    }


    if(userIndex == -1){
        var apps=[];
        var version = [];
        var requestCount = [];
        var resourse =[];

        requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
        resourse.push([usage[x].version,requestCount]);
        version.push([usage[x].apiName,resourse]);
        apps.push([usage[x].cachetHit,version])
        webapps.push([usage[x].time,apps]);
    }else{
        if(webappIndex == -1){
            var version = [];
            var requestCount = [];
            var resourse =[];
            requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
        resourse.push([usage[x].version,requestCount]);
        version.push([usage[x].apiName,resourse]);
            webapps[userIndex][1].push([usage[x].cachetHit,version]);
        }else{
            if(webappVersionIndex == -1){
                var requestCount = [];
            var resourse =[];
            requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
        resourse.push([usage[x].version,requestCount]);
                webapps[userIndex][1][webappIndex][1].push([usage[x].apiName,resourse]);
            }else{
                if(webresourceIndex == -1){
                     var requestCount = [];
                    requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
                webapps[userIndex][1][webappIndex][1][webappVersionIndex][1].push([usage[x].version,requestCount]);

            }else{
                 webapps[userIndex][1][webappIndex][1][webappVersionIndex][1][webresourceIndex][1].push([usage[x].fullRequestPath,usage[x].totalRequestCount]);

        }

    }

}
    }
}



if (usage == null) {
    obj = {
        error:true
    };
} else {
    obj = {
        error:false,
        webapps:webapps
    };
}

print(webapps);


%>