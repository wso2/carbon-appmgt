<%

/*
 Description: Provides CRUD support for assets
 Note: type: shortName in the Rxt templates
 GET  api/asset/{type}            : Provides the Rxt template
 GET  api/asset/{type}/{id}        : Provides artifact details on the provided type
 POST api/asset/{type}             : Creates a new asset of the given type
 PUT  api/asset/{type}/{id}   : Updates an asset with the given type and id
 DELETE asset/{type}/{id}     : Deletes an asset with the provided type and id
 Filename:asset.js
 Created Date: 29/7/2013
 */
include("/extensions/webapp/modules/jagg/jagg.jag");
var permissions=require('/modules/permissions.js').permissions;
var config = require('/config/publisher.json');
var SITE_TYPE = 'site';
var WEBAPP_TYPE = 'webapp';
var MOBILEAPP_TYPE = 'mobileapp';
var CONTENT_TYPE_JSON = "application/json";
var assetType;
var auditLog = require('/modules/auditLog/logger.js');

require('/modules/publisher.js').exec(function(ctx) {

    var config = require('/config/publisher.json');
    caramel = require('caramel');
    var server = require('store').server;
    var storeUser=require('store').user;
    var apiProvider = jagg.module('manager').getAPIProviderObj();
    var appmgtPublisher = require('appmgtpublisher');
    var utility = require('/modules/utility.js').rxt_utility();
    var assetCachingModule = require('/modules/cache/cache.manager.js').assetCachingModule();
    var publisher = require('/modules/publisher.js').publisher(request, session);
    var storageModule = require('/modules/data/storage.js').storageModule();
    var storageConfig = require('/config/storage.json');
    var USER_ROLE_PREFIX = 'Internal/private_';

    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();

    //var routeManager=application.get(config.app.ROUTE_MANAGER);
    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;
    var dataInjector = publisher.dataInjector;
    var DataInjectorModes = publisher.DataInjectorModes;
    var filterManager = publisher.filterManager;

    mod = jagg.module("documentation");
    var typeList = apiProvider.getEnabledAssetTypeList();

    function getOwnerList() {
        var businessOwnerList = apiProvider.getBusinessOwnerList();
        var ownersList = JSON.parse(stringify(businessOwnerList));
        var ownerNames = "";
        for (var i = 0; i < ownersList.length; i++) {
            if (i == 0) {
                ownerNames = ownerNames + "\'" + ownersList[i].owner_name;
            } else {
                ownerNames = ownerNames + "/" + ownersList[i].owner_name;
            }
        }
        ownerNames = ownerNames + "\'";
        return ownerNames;
    }

    routeManager.register('GET', 'publisher', '/publisher/asset/{type}', function(context) {

    var shortName = (context.params.type) || '';
    var operation = 'create';

    var rxtTemplate;
    if (apiProvider.isAssetTypeEnabled(shortName)) {
        rxtTemplate = rxtManager.findAssetTemplate(function (template) {
            return (template.shortName == shortName) ? true : false;
        });
    }

    var model = modelManager.getModel(shortName);

    if (!rxtTemplate) {
        log.debug('The requested asset type: ' + shortName + ' was not found');
        response.sendError(404, 'Asset type not found'); //TODO: Replace
    }
    else {
        //Obtain the username from the session and populate the provider field
        var username = server.current(session).username;//.get('LOGGED_IN_USER');

        var tenantDomain = Packages.org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getTenantDomain();
        var tenantIdVal = Packages.org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getTenantId();
        var provider = "";
        if(tenantIdVal=='-1234'){
            provider = storeUser.cleanUsername(username);
        }else {
            provider = storeUser.cleanUsername(username)+'-AT-'+tenantDomain;
        }

        model.set('overview.provider', provider);

        //model.set('overview.provider', storeUser.cleanUsername(username));

        var output = model.export('form');
        var title = shortName;
        var subscriptionConfiguration = apiProvider.getSubscriptionConfiguration();
        var isSubscriptionEnabled;
        if(!subscriptionConfiguration.EnableSelfSubscription && !subscriptionConfiguration.EnableEnterpriseSubscription ){
            isSubscriptionEnabled = false;
        }else{
            isSubscriptionEnabled = true;
        }
        output.sso_provider = getIdentityProviderUrl();
        caramel.render({
            isSubscriptionEnabled:isSubscriptionEnabled,
            op: operation,
            cuser: server.current(session),
            shortName: shortName,
            rxtTemplate: rxtTemplate,
            data: output,
            title: title,
            typeList: typeList,
	        ownerList: JSON.stringify(getOwnerList())
            }
        );
    }
});

routeManager.register('GET', 'publisher', '/publisher/asset/{type}/{id}', function (context) {

    var shortName = context.params.type;
    //print(context.params);
    var id = context.params.id;
    var operation = 'view';
    var artifactManager = rxtManager.getArtifactManager(shortName);

    //If the id is not found it will throw a conversion exception
    //TODO: Return an empty artifact or null
    try {

        log.debug('look for '+id);

        var artifact = artifactManager.get(id);

        log.debug('left');

        //Get the template
        var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
            return (template.shortName == shortName) ? true : false;
        });

        var model = modelManager.getModel(shortName);

        //Customize the asset for the app
        dataInjector.inject(artifact, DataInjectorModes.DISPLAY);


        //Perform filtering logic on the artifact
        artifact=filterManager.filter(artifact,session);

        //If there is no data after the filtering step we need to send an error
        if(!artifact){
            response.sendError(401,'You do not have viewing permissions to the requested asset');
            return;
        }

        model.import('asset', artifact);

        var output = model.export('form');

        var assetName = model.get('overview.name').value;
        //Get the list of versions
        var versionList = artifactManager.getAllAssetVersions(assetName);

        var path = artifact.path;
        var tags = rxtManager.registry.tags(path);
        var title = assetName;

        //get document related data
        var apiData = {};
        apiData.provider = model.get('overview.provider').value;
        apiData.name = model.get('overview.name').value;
        apiData.version = model.get('overview.version').value;
        var result = mod.getAllDocumentation(apiData);

        //get external store details
        var externalAppStores = getExternalAppStores(apiData);
        var appStoresDetail = {};
        appStoresDetail.app = apiData;
        appStoresDetail.externalStores = externalAppStores;

        // getting the user roles
        var server = require('store').server;
        var user = server.current(session);
        var um = server.userManager(user.tenantId);

        var docCreateAuth = permissions.isAuthorized(user.username, config.permissions.document_add, um);
        var docEditAuth = permissions.isAuthorized(user.username, config.permissions.document_edit, um);
        var docDeleteAuth = permissions.isAuthorized(user.username, config.permissions.document_delete, um);

        if (apiProvider.isAssetTypeEnabled(shortName)) {
            caramel.render({
                op: operation,
                cuser: server.current(session),
                shortName: shortName,
                artifact: artifact,
                rxtTemplate: rxtTemplate,
                data: output,
                versions: versionList,
                tags: tags,
                title: title,
                docs: result.docs,
                appStores: appStoresDetail,
                permissions: {
                    canCreate: docCreateAuth,
                    canEdit: docEditAuth,
                    canDelete: docDeleteAuth
                },
		        ownerList: JSON.stringify(getOwnerList())
            });
        }
        else {
            response.sendError(404, 'Resource does not exist');
        }

    } catch (e) {
        log.error('The asset with id ' + id + ' could not be found due to : ' + e);
        response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check server log.');
    }

});


    routeManager.register('GET', 'publisher', '/publisher/asset/operations/{opType}/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var permissions = require('/modules/permissions.js').permissions;

        if (shortName === "mobileapp") {
            editMobileApp(context, rxtManager, modelManager, dataInjector, DataInjectorModes);
            return;
        }

        var subscriptionConfiguration = apiProvider.getSubscriptionConfiguration();
        var isSubscriptionEnabled;
        if(!subscriptionConfiguration.EnableSelfSubscription && !subscriptionConfiguration.EnableEnterpriseSubscription ){
            isSubscriptionEnabled = false;
        }else{
            isSubscriptionEnabled = true;
        }

        //print(context.params);
        var id = context.params.id;
        var operation = context.params.opType;
        var artifactManager = rxtManager.getArtifactManager(shortName);

        //If the id is not found it will throw a conversion exception
        //TODO: Return an empty artifact or null
        try {
            var artifact = artifactManager.get(id);

            //Get the template
            var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
                return (template.shortName == shortName) ? true : false;
            });

            var model = modelManager.getModel(shortName);

            //Customize the asset for the app
            dataInjector.inject(artifact, DataInjectorModes.DISPLAY);

            model.import('asset', artifact);

            var output = model.export('form');

            var assetName = model.get('overview.name').value;

            //Get the list of versions
            var versionList = artifactManager.getAllAssetVersions(assetName);

            var apiData = {};
            apiData.provider = model.get('overview.provider').value;
            apiData.name = model.get('overview.name').value;
            apiData.version = model.get('overview.version').value;
            var result = mod.getAllDocumentation(apiData);

            //Get tags
            var path = artifact.path;
            var tags = rxtManager.registry.tags(path);
            var title = assetName;

            // getting the user roles
            var server = require('store').server;
            var user = server.current(session);
            var um = server.userManager(user.tenantId);

            var registry = new carbon.registry.Registry(server, {
                username: user.username,
                tenantId: user.tenantId
            });

            var path = artifact.attributes.overview_permissions;
            log.debug("Path of permission resource : "+path);
            var permissionSet = null;
            var overridenPermissions = null;
            if(path && (path != "null")){
                permissionSet = registry.get(path);

                var content = '' + permissionSet.content;

                if (content) {
                    output.permissions = JSON.parse(content);
                }
            }

            output.fields[1]['isEditable'] = false;
            output.fields[1]['isReadOnly'] = true;

            output.fields[2]['isEditable'] = false;
            output.fields[2]['isReadOnly'] = true;

            output.fields[3]['isEditable'] = false;
            output.fields[3]['isReadOnly'] = true;

            if (operation == "edit" || operation == "view" || operation == "copyapp") {
                var uriTemplate = 0;
                for (index = 0; index < output.fields.length; index++) {
                    if (output.fields[index].name == "uritemplate_urlPattern" + uriTemplate) {
                        if (output.fields[index].value == "" || output.fields[index].value == "null") {
                            output.fields.splice(index, 1);
                        }
                        uriTemplate++;
                    }
                }
            }


            if (operation == "documentation") {
                var docCreateAuth = permissions.isAuthorized(user.username, config.permissions.document_add, um);
                var docEditAuth = permissions.isAuthorized(user.username, config.permissions.document_edit, um);
                var docDeleteAuth = permissions.isAuthorized(user.username, config.permissions.document_delete, um);

                caramel.render({
                    op: operation,
                    cuser: user,
                    shortName: shortName,
                    artifact: artifact,
                    rxtTemplate: rxtTemplate,
                    data: output,
                    versions: versionList,
                    tags: tags,
                    title: title,
                    docs: result.docs,
                    permissions: {canCreate: docCreateAuth, canEdit: docEditAuth, canDelete:docDeleteAuth},
                    ownerList: JSON.stringify(getOwnerList())
                });
            } else {
                caramel.render({
                    isSubscriptionEnabled: isSubscriptionEnabled,
                    op: operation,
                    cuser: user,
                    shortName: shortName,
                    artifact: artifact,
                    rxtTemplate: rxtTemplate,
                    data: output,
                    versions: versionList,
                    tags: tags,
                    title: title,
                    ownerList: JSON.stringify(getOwnerList())
                });
            }

        } catch (e) {
            log.debug('The asset with id ' + id + ' could not be found due to : ' + e);
            response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check server log.');
        }

    });

routeManager.register('POST', 'publisher', '/publisher/asset/{type}', function (context) {
    var log = new Log();
    var oldVersion = context.post.oldVersion;

    var carbon = require('carbon');
    var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');



    var server = require('store').server;
    var user=server.current(session);
    var um = server.userManager(server.current(session).tenantId);
    var username = user.username;
    var tenantId = server.current(session).tenantId;

    if (permissions.isAuthorized(username, config.permissions.webapp_create, um)) {

        var shortName = context.params.type;
        var artifactManager = rxtManager.getArtifactManager(shortName);
        var model = modelManager.getModel(shortName);
        var assetCacheManager = new assetCachingModule.AssetCacheManager(session);

        //context.post['tag-container'] = ['tag1', 'tag2'];

        //Check if the type is valid
        try {
            //Process and add any files in the request if the application is not in the copy mode
            if (context.post["overview_treatAsASite"].toLowerCase() == 'true') {
                assetType = SITE_TYPE;
            } else {
                assetType = WEBAPP_TYPE;
            }
            if(oldVersion == null || oldVersion == '') {
                inspectFiles(request, context.post);
            }

            model.import('form.importer', context.post);

            //Perform validation on the model
            var report = model.validate();

            if ((report) && (report.failed)) {

                response.contentType = CONTENT_TYPE_JSON;
                print({ok: false, message: 'Validation failure', report: report});
                return;
            }

            var name = model.get('overview.name').value;
            var provider = model.get('overview.provider').value;
            var version = model.get('overview.version').value;

            if (context.post['overview_context'].length > 200) {
                response.contentType = CONTENT_TYPE_JSON;
                print({ok: false, message: 'Context value length is more than 200', report: report});
                return;
            }

            //Check whether duplicate webapp exists
            var isexists = isWebappExists(name, provider, version);

            //If exists, return an error message
            if (isexists == true) {
                response.contentType = CONTENT_TYPE_JSON;
                print({ok: false, isexists: true, message: "Error occurred while adding the WebApp. A duplicate WebApp already exists with name - '" +
                                                       name + "' and version - '" + version +"'"});
                return;
            }

            //log.debug(context.post);

            model.save();

            //Obtain the asset id in order to retrieve the asset again
            var assetId = model.get('*.id').value;

            try{
                social.warmUpRatingCache(shortName + ':' + assetId);
            }catch(e) {
                log.warn("Unable to publish the asset: " + shortName + ":" + assetId + " to social cache. This may affect on sort by popularity function.");
            }

            //Convert the model to an artifact
            var asset = model.export('asset.exporter');
            //Cache the asset
            assetCacheManager.add(asset, shortName);

            var reg = rxtManager.registry;

            //Add the tags
            addTags(context.post, assetId, artifactManager, reg);

            // Save external entitlement policies
            var webappId = {};
            webappId.provider = model.get('overview.provider').value;
            webappId.name = model.get('overview.name').value;
            webappId.version = model.get('overview.version').value;
            if(oldVersion != null && oldVersion != '') {
                webappId.oldVersion = oldVersion;
                //Copy web app documentation
                copyDocuments(webappId);
                copyRolePermissions(assetId,artifactManager);
            }
            var tenantDomain = Packages.org.wso2.carbon.context.PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();
            username = username + "@" + tenantDomain;
            var appMgtProviderObj = new appmgtPublisher.APIProvider(username);
            appMgtProviderObj.generateEntitlementPolicies(webappId);

            if (oldVersion == null || oldVersion == '') {
                auditLog.writeLog(tenantId, username, "NewAssestAdded", shortName, "{" +
                                                                                   "providerName='" + webappId.provider
                                                                                   + '\'' +
                                                                                   ", apiName='" + webappId.name + '\''
                                                                                   +
                                                                                   ", version='" + webappId.version
                                                                                   + '\'' +
                                                                                   '}', "", "");
            }
            else {
                auditLog.writeLog(tenantId, username, "NewVersionAdded", shortName, "{" +
                                                                                    "providerName='" + webappId.provider
                                                                                    + '\'' +
                                                                                    ", apiName='" + webappId.name + '\''
                                                                                    +
                                                                                    ", version='" + webappId.version
                                                                                    + '\'' +
                                                                                    '}', "", "");
            }
            response.contentType = CONTENT_TYPE_JSON;
            print({ok: true, message: 'asset added', id: assetId});
        }
        catch (e) {
            log.error(e);
            log.debug('An instance could not be created for asset with type :' + shortName + '.The following exception was recorded: ' + e);
            response.sendError(500, 'The asset instance could not be created.Please check the server log.');
        }
    }else{
        response.contentType = CONTENT_TYPE_JSON;
        print({ok: false, message: 'Failed to add Asset. Insufficient privileges.'});
        return;
        //response.sendError(401, 'Failed to add Asset : Insufficient Privilages.');
    }

});

 routeManager.register('POST', 'publisher', '/publisher/asset/{type}/id/{assetId}/permissions', function(context) {

        var assetId = context.params.assetId;

        var artifactManager = rxtManager.getArtifactManager(context.params.type);
        var permissions = context.request.getContent();

        overridePermissions(assetId, artifactManager, permissions);
    });

    /**
    * Get identity provider URL
    */
    function getIdentityProviderUrl() {
        return apiProvider.getIdentityProviderUrl();
    }

    /**
     * Get external app store details
     * @param apiData
     * @returns {*}
     */
    function getExternalAppStores(apiData){
        try{
            var externalAppStores = apiProvider.getExternalAppStoresList(apiData.provider, apiData.name, apiData.version);
            return externalAppStores;
        } catch(e) {
            log.error("Error while getting external app store details : " +e);
        }

    }
/**
* Check whether the application already exists
*/
function isWebappExists(webappName,provider,version){
    return apiProvider.isWebappExists(webappName,provider,version);
}

   function copyDocuments(webappId){
       apiProvider.copyWebappDocumentations(webappId);
   }

    function copyRolePermissions(webappId,artifactManager){
        var registry = new carbon.registry.Registry(server, {
            username: server.current(session).username,
            tenantId: server.current(session).tenantId
        });
        var artifact = artifactManager.get(webappId);
        var permPath = artifact.path + "role_restrictions";
        var resource ={
            content: JSON.stringify(permissions),
            mediaType: 'text/plain'
        };

        registry.put(permPath,resource);
    }

/*
The function is used to add tags to the provided asset id
@params: A post parameter object
@assetId: The id of the asset to which the tags will be applied
@artifactManager: An artifact manager instance
@reg: A registry instance
 */
function addTags(params,assetId,artifactManager,reg){

    //Obtain the tags parameter
   // var tags=params['tags']||[];
     var tags=params['tag-container']||[];

    //Only proceed if there are any tags
    if(tags.length==0){
        log.debug('no tags to add to '+assetId);
        return;
    }

    //Obtain the artifact
    var asset=artifactManager.get(assetId);

    var path=asset.path;
    tags = tags.split(',');

    //Attach the tags
    reg.tag(path,tags);

}





    /*
     The function inspects the files sent with a request.If files are found
     they are added to Storage and then the generated uuids are added to
     the POST parameter object
     @req: A request object
     @params: The POST parameters
     */
    function inspectFiles(req, params) {
        var files = req.getAllFiles();

        // For thumbnail & banner: if not uploaded then set the POST parameter to empty string
        if (files == null) {
            params["images_thumbnail"] = "";
            params["images_banner"] = "";
            return;
        } else if (files.images_thumbnail == null) {
            params["images_thumbnail"] = "";
        } else if (files.images_banner == null) {
            params["images_banner"] = "";
        }

        var storageManager = new storageModule.StorageManager({
            context: 'storage',
            isCached: false,
            connectionInfo: {
                dataSource: storageConfig.dataSource
            }
        });

        for (var index in files) {
            if (!files.hasOwnProperty(index)) {
                continue;
            }
            var file = files[index];
            //Put the file in storage and get a uuid as a reference
            var resource = {};
            resource['file'] = file;
            var extension = utility.fileio.getExtension(file);
            resource['contentType'] = utility.fileio.getContentType(extension);
            var uuid = storageManager.put(resource);

            //Add a new  entry into the POST parameters containing the uuid
            params[index] = uuid;
        }
    }

routeManager.register('PUT', 'publisher', '/publisher/asset/{type}/{id}/{attr}/{value}', function (context) {
    log.debug('Unsupported method PUT for /asset called.');
    /*var shortName=context.params.type;
     var id=context.params.id;
     var attribute=context.params.attr;
     var attributeValue=context.params.value;
     var artifactManager=rxtManager.getArtifactManager(shortName);

     //Obtain the artifact
     try{
     var result=artifactManager.update({
     id:id,
     attributes: {
     attribute:attributeValue,
     overview_type:'default'
     }
     });
     print(result);

     }catch(e){
     print('unable to update artifact with id'+e);
     }*/
});

routeManager.register('DELETE', 'publisher', '/publisher/asset/{type}/{id}', function (context) {
    var shortName = context.params.type;
    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    try {
        artifactManager.remove(id);

    } catch (e) {
        log.debug('Asset id: ' + id + 'was not removed.Due to exception: ' + e);
        response.sendError(404, 'Asset with id: ' + id + 'was not removed.Please check the server log for more details.');
    }


});
routeManager.handle(request, response);

}, request, response, session);




/*************************************************MOBILEAPP*******************************************************/



function editMobileApp(context, rxtManager, modelManager, dataInjector, DataInjectorModes){

    var server = require('store').server;

    var shortName = context.params.type;
    //print(context.params);
    var id = context.params.id;
    var operation = context.params.opType;
    var artifactManager = rxtManager.getArtifactManager(shortName);

    //If the id is not found it will throw a conversion exception
    //TODO: Return an empty artifact or null
    try {
        var artifact = artifactManager.get(id);

        //Get the template
        var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
            return (template.shortName == shortName) ? true : false;
        });

        var model = modelManager.getModel(shortName);

        //Customize the asset for the app
        dataInjector.inject(artifact, DataInjectorModes.DISPLAY);

        model.import('asset', artifact);

        var output = model.export('form');

        var assetName = model.get('overview.name').value;

        //Get the list of versions
        var versionList = artifactManager.getAllAssetVersions(assetName);

        //Get tags
        var path = artifact.path;
        var tags = rxtManager.registry.tags(path);
        var title = assetName;

        caramel.render({op: operation, cuser: server.current(session), shortName: shortName, artifact: artifact, rxtTemplate: rxtTemplate, data: output, versions: versionList, tags:tags, title:title});
    } catch (e) {
        log.info(e);
        log.debug('The asset with id ' + id + ' could not be found due to : ' + e);
        response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check server log.');
    }


}


/*
 The function is used to add/edit permissions to the provided asset id
 @assetId: The id of the asset to which the tags will be applied
 @artifactManager: An artifact manager instance
 @permission: Requried permissions
 */
function overridePermissions(assetId, artifactManager, permissions) {
    var server = require('store').server;
    var USER_ROLE_PREFIX = 'Internal/private_';
    var denyEveryone = false;

    if (permissions.length > 0) {
        denyEveryone = true;
    }

    // set a property in  the artifact indicating the permissions are overriden / remove the lifecycle
    var artifact = artifactManager.get(assetId);
    // artifactManager.detachLifecycle(artifact);

    var lifecycle = require('lifecycle').api;
    var lc = lifecycle.getLifecycle(artifact.lifecycle,server.current(session).tenantId);

    var currentState = artifact.lifecycleState;
    var transitionExecution = [];
    if(currentState=="Created") {
        transitionExecution = lc.transitionExecution("Initial", "Create");
    }else if(currentState=="In-Review"){
        transitionExecution = lc.transitionExecution("Created", "Submit for Review");
    }else if(currentState=="Rejected"){
        transitionExecution = lc.transitionExecution("In-Review", "Reject");
    }
    var tenantId = server.current(session).tenantId;

    // remove all the current permissions from the asset
    var um = server.userManager(server.current(session).tenantId);
    um.clearResourceAuthorizations(artifact.path);

    var permissionDeny = [];

    //Build roles with denied permission
    transitionExecution.forEach(function(element) {
        var name = element.name;
        if(name.indexOf("STATE_RULE")===0){
            if(filterActions(element.value.split(":")[1],"deny").length > 0) {
                permissionDeny.push({
                                        role: constructDynamicRoles(element.value.split(":")[0], tenantId, artifact),
                                        permissions: filterActions(element.value.split(":")[1],"deny")
                                    });
            }
        }
    });

    permissionDeny.forEach(function (rolePermissions) {
        var role = rolePermissions.role;

        rolePermissions.permissions.forEach(function (permission) {

            permission = carbon.registry.actions[permission];

            um.denyRole(role, artifact.path, permission);
        });
    });

    if(denyEveryone){
        um.denyRole('Internal/everyone', artifact.path, carbon.registry.actions.GET);
    }


    // But, there's an internal_everyone coming up with +GET. Let's nuke it.
    //um.denyRole('Internal/everyone', artifact.path, carbon.registry.actions.GET);
    //remove Internal/everyone role if there are roles added only.

    <!--permissions.forEach(function (rolePermissions) {-->
    <!--var role = rolePermissions.role;-->
    <!--if (role != 'Internal/private_admin' && role != 'admin') {-->
    <!--if (rolePermissions.permissions.length > 0) {-->
    <!--denyEveryone = true;-->
    <!--}-->
    <!--}-->
    <!--});-->

    if(denyEveryone){
        um.denyRole('Internal/everyone', artifact.path, carbon.registry.actions.GET);
    }


    var username = server.current(session).username;
    var currentUserRole = USER_ROLE_PREFIX + username;

    // Prevent the user from making modifications to the default roles
    // If the permissions are defined for the two roles that we're explicitly adding permissions
    // as below, just splice them up.
    for (var i = permissions.length - 1; i >= 0; i--) {
        if (permissions[i].role === currentUserRole || permissions[i].role === 'admin') {
            permissions.splice(i, 1);
        }
    };

    //Build Permissions to be added.
    transitionExecution.forEach(function(element) {
        var name = element.name;
        if(name.indexOf("STATE_RULE")===0){
            if(filterActions(element.value.split(":")[1]).length > 0) {
                permissions.push({
                                     role: constructDynamicRoles(element.value.split(":")[0], tenantId, artifact),
                                     permissions: filterActions(element.value.split(":")[1])
                                 });
            }
        }
    });

    //  1. +get +edit +delete +authorize for asset_{owner}
    /**permissions.push({
            role: currentUserRole,
            permissions: ['GET', 'PUT', 'DELETE', 'AUTHORIZE']
        });
     //  2. +get +edit +delete +authorize for admin TODO: 'admin' needs to come from a config
     permissions.push({
            role: 'admin',
            permissions: ['GET', 'PUT', 'DELETE', 'AUTHORIZE']
        });*/

        // add the permissions as passed
    permissions.forEach(function(rolePermissions) {
        var role = rolePermissions.role;

        rolePermissions.permissions.forEach(function(permission) {

            permission = carbon.registry.actions[permission];
            um.authorizeRole(role, artifact.path, permission);
        });

    });

    var registry = new carbon.registry.Registry(server, {
        username: server.current(session).username,
        tenantId: server.current(session).tenantId
    });

    artifact.name = artifact.attributes.overview_name;
    var permPath = artifact.path + "role_restrictions";

    var resource ={
        content: JSON.stringify(permissions),
        mediaType: 'text/plain'
    };

    registry.put(permPath,resource);

    artifact.attributes.overview_permissions = permPath;
    delete artifact.content;
    artifactManager.update(artifact);
}

function filterActions(actions,operation){
    var symbol = "+";
    if(operation=="deny"){
        symbol = "-";
    }
    var actions = actions.split(",");
    var filteredActions = [];
    actions.forEach(function (value) {
        if(value.indexOf(symbol)===0){
            switch(value){
                case symbol+"get" :
                    filteredActions.push("GET");
                    break;
                case symbol+"add" :
                    filteredActions.push("PUT");
                    break;
                case symbol+"delete" :
                    filteredActions.push("DELETE");
                    break;
                case symbol+"authorize" :
                    filteredActions.push("AUTHORIZE");
                    break;
            }
        }
    });
    return filteredActions;
}

function constructDynamicRoles(role,tenantId,item){
    var revisedRole;
    var overviewProvider = item.attributes.overview_provider;
    if(tenantId == '-1234') {
        revisedRole = role.replace('{asset_author}', overviewProvider);
    } else {
        var providerDetails = overviewProvider.split("-AT-");
        revisedRole = role.replace('{asset_author}', providerDetails[0]);
    }
    return revisedRole;
}

%>
