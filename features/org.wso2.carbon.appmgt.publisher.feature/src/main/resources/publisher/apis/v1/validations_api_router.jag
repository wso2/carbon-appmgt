<%

/*
 Description: The class is used to perform validations on a field name value pair
    GET /api/validations/assets/{type}/{fieldName}/{fieldValue}     Returns a action object indicating whether the field is correct
 Filename: validations_api_router.jag
 Created Date: 8/10/2013
 */

include("/extensions/webapp/modules/jagg/jagg.jag");

require('/modules/publisher.js').exec(function (ctx) {

    var config = require('/config/publisher.json');
    var caramel = require('caramel');
    var utility = require('/modules/utility.js').rxt_utility();
    var apiProvider = jagg.module('manager').getAPIProviderObj();
    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    var log = new Log();

    routeManager.register('GET', 'publisher', '/publisher/api/validate/{appType}/field/{fieldName}', function (context) {

        var appType = context.params.appType;
        var fieldName = context.params.fieldName;

        if (appType == 'mobileapp') {
            var queryParams = request.getAllParameters();
            var mobileValidatorModule = require('/extensions/mobileapp/validations.js');
            var mobileValidator = new mobileValidatorModule.Validator(null);
            var result = mobileValidator.validateFormField(fieldName, queryParams[fieldName],
                                                           queryParams);
            if (result.status != mobileValidatorModule.ValidationStatus.VALID) {
                response.status = 422; // Unprocessable Entity (WebDAV; RFC 4918)
                response.contentType = "application/json";
                var content = {status: "Validation Error", action: result.action};
                response.content = stringify(content);
                return;
            }
            response.status = 200;
            response.content = stringify({status: "Success"});
        }
    });

    routeManager.register('GET', 'publisher', '/publisher/api/validate/{appType}/form/name/{formName}', function (context) {

        var appType = context.params.appType;
        var formName = context.params.formName;

        if (appType == 'mobileapp') {
            var queryParams = request.getAllParameters();
            var partialValidation = false;
            if (queryParams['partial']) {
                partialValidation = Boolean(queryParams['partial']);
            }
            var mobileValidatorModule = require('/extensions/mobileapp/validations.js');
            var mobileValidator = new mobileValidatorModule.Validator(null);
            var result = mobileValidator.validateForm(formName, queryParams, partialValidation);

            if (result.status != mobileValidatorModule.ValidationStatus.VALID) {
                response.status = 422; // Unprocessable Entity (WebDAV; RFC 4918)
                response.contentType = "application/json";
                var content = {
                    status: "Validation Error",
                    validationResults: result.validationResults
                };
                response.content = stringify(content);
                return;
            }
            response.status = 200;
            response.content = stringify({status: "Success"});
        }
    });

    routeManager.register('POST', 'publisher', '/publisher/api/validations/assets/webapp/overview_context', function (context) {
        var contextVal = context.post.overview_context;
        var shortName = context.params.type;

        try {
            var oldContextVal = '';
            var isContextExists = isContextExist(contextVal, oldContextVal);
            print(isContextExists);
        } catch (e) {
            log.error('An asset of type: ' + shortName
                      + ' could not be created.The following exception was thrown');
            log.error(e);
            response.sendError(500, 'An asset of type: ' + shortName
                                    + ' could not be created.Please check the server logs.');
        }

    });

    routeManager.register('GET', 'publisher', '/publisher/api/validations/assets/{type}/{fieldName}/{fieldValue}', function (context) {

        if (context.params) {
            var shortName = context.params.type;
            var fieldName = context.params.fieldName;
            var fieldValue = context.params.fieldValue;
        }

        try {
            var contextVal = '/' + fieldValue;
            var oldContextVal = '';
            var isContextExists = isContextExist(contextVal, oldContextVal);
            print(isContextExists);

        } catch (e) {
            log.error('An asset of type: ' + shortName
                      + ' could not be created.The following exception was thrown');
            log.error(e);
            response.sendError(500, 'An asset of type: ' + shortName
                                    + ' could not be created.Please check the server logs.');
        }

    });

    /**
     * Validate whether the context already exists
     */
    function isContextExist(fieldValue, oldContext) {
        return apiProvider.isContextExist(fieldValue, oldContext);
    }


    var securityModule = require('/modules/security/security.manager.js').securityManagementModule();
    var sm = securityModule.cached();

    //This will short circuit the handling of the requests
    var passed = sm.check(session, function () {
        response.sendError(401);
    });

    //Stop servicing the request if the check failed
    if (passed) {
        var user = require('store').user;
        var publisher = require('/modules/publisher.js').publisher(request, session);
        var rxtManager = publisher.rxtManager;
        var modelManager = publisher.modelManager;
        var tagModule = require('/modules/tag.management.js').tagModule();
        routeManager.handle(request, response);
    }

}, request, response, session);
%>
