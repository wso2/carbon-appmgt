<%

require('/modules/publisher.js').exec(function (ctx) {

    var config = require('/config/publisher.json');
    var caramel = require('caramel');

    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();

    var appmgtPublisher = require('appmgtpublisher');

    var log = new Log();

    routeManager.register('POST', 'publisher', '/publisher/api/assets/{operation}/{type}/{action}/', function (context) {
        var action = context.params.action;

        var server = require('store').server;
        var username = server.current(session).username;
        var startDate = context.post.startDate;
        var endDate = context.post.endDate;

	var tenantDomain = Packages.org.wso2.carbon.context.PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();
	username = username + "@" + tenantDomain;

        var appMgtProviderObj = new appmgtPublisher.APIProvider(username);

        if (endDate != null) {
           endDate = endDate.trim();
        }


		var usage = [];


		//manipulate endDate to overcome date-picker issue
		var date = new Date(Date.parse(endDate.replace(/-/g,"/")));
		date.setDate(date.getDate() + 1);
		// The getMonth() method returns the month (from 0 to 11) for the specified date
		var month = (date.getMonth() + 1);

        		endDate = date.getFullYear()+'-'+date.getMonth()+'-'+date.getDate();


                if (date.getMonth().toString().length < 2) {
                    endDate = date.getFullYear() + '-' + '0' + month + '-' + date.getDate();
                } else {
                    endDate = date.getFullYear() + '-' + month + '-' + date.getDate();

                }

		var usage = [];

		var obj, result;

		/* Web Application Last Access Time Graph */
		if (action == "getSubscriberCountByAPIs") {
			//output = stats.getHotAssetStats(startDate,endDate,tenantId);
			usage = appMgtProviderObj.getSubscriberCountByAPIs("__all_providers__",startDate,endDate);

			var obj, result;
            var webapps = [];

            for(x=0;x<usage.length;x++){
                var webappIndex = -1;
                var webappVersionIndex = -1;

                for(y=0;y<webapps.length;y++){

                    if(webapps[y][0] == usage[x].apiName){

                        webappIndex = y;
                        var z;
                        for(z=0;z<webapps[y][1].length;z++){
                            if(webapps[y][1][z][0] == usage[x].version){
                                webappVersionIndex = z;
                                break;
                            }
                        }
                        if((webappVersionIndex == -1) && (z == webapps[y].length)){
                            break;
                        }
                    }
                }

                if(webappIndex == -1){
                    var version = [];
                    var requestCount = [];

                    version.push([usage[x].version,usage[x].count,usage[x].uuid]);
                    webapps.push([usage[x].apiName,version]);
                }else{
                    if(webappVersionIndex == -1){
                        var requestCount = [];

                        webapps[webappIndex][1].push([usage[x].version,usage[x].count,usage[x].uuid]);
                    }
                    else{
                        webapps[webappIndex][1][webappVersionIndex][1].push([usage[x].userId]);
                    }
                }

            }

            if (usage == null) {
                obj = {
                    error:true
                };
            } else {
                obj = {
                    error:false,
                    webapps:webapps
                };
            }

            response.contentType = "application/json";
            print(webapps);

		} else  if (action == "getSubscribedAPIsByUsers") { /* Overall Web Application Usage Graph */
			usage = appMgtProviderObj.getSubscribedAPIsByUsers("__all_providers__",startDate,endDate);




			var obj, result;
            var webapps = [];


 for(x=0;x<usage.length;x++){
                var userIndex = -1;
                var appIndex = -1;

                for(y=0;y<webapps.length;y++){

                    if(webapps[y][0] == usage[x].user){

                        userIndex = y;
                        var z;
                        for(z=0;z<webapps[y][1].length;z++){
                            if(webapps[y][1][z][0] == usage[x].apiName){
                                appIndex = z;
                                break;
                            }
                        }
                        if((appIndex == -1) && (z == webapps[y].length)){
                            break;
                        }
                    }
                }

                if(userIndex == -1){

                    var version = [];
                    var app=[];


                    version.push([usage[x].version,usage[x].subscribeDate]);
                    app.push([usage[x].apiName,version])
                    webapps.push([usage[x].user,app]);
                }else{
                    if(appIndex == -1){
                         var version = [];
                        var app=[];
                       version.push([usage[x].version,usage[x].subscribeDate]);


                        webapps[userIndex][1].push([usage[x].apiName,version]);
                    }
                    else{
                        webapps[userIndex][1][appIndex][1].push([usage[x].version,usage[x].subscribeDate]);
                    }
                }

            }
			if (usage == null) {
                obj = {
                    error:true
                };
            } else {
                obj = {
                    error:false,
                    webapps:webapps
                };
            }

            response.contentType = "application/json";
            print(webapps);

		}

		else if (action == "getAppsForTenantDomain") {
			usage = appMgtProviderObj.getAppsForTenantDomain("__all_providers__");
			var obj;
			var webapps = [];

			for (x = 0; x < usage.length; x++) {
				webapps.push([usage[x].name, usage[x].version, usage[x].endpoint]);
			}
			if (usage == null) {
				obj = {
					error: true
				};
			} else {
				obj = {
					error: false,
					webapps: webapps
				};
			}
            response.contentType = "application/json";
			print(webapps);

		} else if (action == "getAPIUsageByUser") { /* Overall Web Application Usage Graph */
			usage = appMgtProviderObj.getAPIUsageByUser("__all_providers__",startDate,endDate);

			usage = parse(stringify(usage));



			function orderByCountAscending(a, b) {
				return b.count - a.count;
			}

			usage = usage.sort(orderByCountAscending);
			var webapps = [];

			for(x=0;x<usage.length;x++){

				var webappIndex = -1;
				var webappVersionIndex = -1;

				for(y=0;y<webapps.length;y++){
					if(webapps[y][0] == usage[x].apiName){
						webappIndex = y;
						var z;
						for(z=0;z<webapps[y][1].length;z++){
							if(webapps[y][1][z][0] == usage[x].version){
								webappVersionIndex = z;
								break;
							}
						}
						if((webappVersionIndex == -1) && (z == webapps[y].length)){
							break;
						}
					}
				}

				if(webappIndex == -1){
					var version = [];
					var requestCount = [];
					requestCount.push([usage[x].userId,usage[x].count.toString()]);
					version.push([usage[x].version,requestCount]);
					webapps.push([usage[x].apiName,version]);
				}else{
					if(webappVersionIndex == -1){
						var requestCount = [];
						requestCount.push([usage[x].userId,usage[x].count.toString()]);
						webapps[webappIndex][1].push([usage[x].version,requestCount]);
					}
					else{
						webapps[webappIndex][1][webappVersionIndex][1].push([usage[x].userId,usage[x].count.toString()]);
					}
				}

			}

			if (usage == null) {
				obj = {
					error:true
				};
			} else {
				obj = {
					error:false,
					webapps:webapps
				};
			}

            response.contentType = "application/json";
			print(webapps);
		}else if (action == "getAPIResponseTime") { /* Overall Web Application Usage Graph */
			var output  = {};
			var apinameData = [],serviceTimeData=[],webApps = [],webappname = [],webapptime=[];
			usage = appMgtProviderObj.getProviderAPIServiceTime("__all_providers__",startDate,endDate);
			usage = parse(stringify(usage));

			function SortByName(x,y) {
				return ((x.apiName == y.apiName) ? 0 : ((y.apiName > x.apiName) ? 1 : -1 ));
			}
			usage  = usage.sort(SortByName);
			for(i=0;i<usage.length;i++){
				webApps.push([i,usage[i].apiName]);
				apinameData.push([i,usage[i].referer]);
				webappname.push([i,usage[i].apiName]);
				serviceTimeData.push([parseInt(usage[i].serviceTime),i]);

			}
			var webapps = [];
			for(x=0;x<usage.length;x++){

				var webappIndex = -1;
				var webappVersionIndex = -1;

				for(y=0;y<webapps.length;y++){
					if(webapps[y][0] == usage[x].apiName){

						webappIndex = y;
						break;
					}
				}

				if(webappIndex == -1){
					var page = [];
					page.push([usage[x].referer,usage[x].serviceTime.toString()]);
					webapps.push([usage[x].apiName,page]);
				}else{
					webapps[webappIndex][1].push([usage[x].referer,usage[x].serviceTime.toString()]);
				}
			}
            for ( var i = 0; i < webapps.length; i++) {
                responsetimeCount =0;
                var count = 0;
                for ( var j = 0; j < webapps[i][1].length; j++) {
                    count++;
                    for ( var l = 0; l < webapps[i][1][j].length; l++) {
                        responsetimeCount = responsetimeCount+ webapps[i][1][j][1];
                    }
                webapptime.push([i,responsetimeCount]);

                }

            }

			output['webapps'] = webapps;
			output['referer'] = apinameData;
			output['serviceTime'] = serviceTimeData;
			output['webappname'] = webappname;
			output['webapptime'] = webapptime;

			if (usage == null) {
				obj = {
					error:true
				};

			} else {
				obj = {
					error:false,
					output:output
				};
			}

            response.contentType = "application/json";
			print(output);
		}else if (action == "getAPIUsageByPage") { /* Overall Web Application Usage Graph */
			usage = appMgtProviderObj.getAPIUsageByPage("__all_providers__",startDate,endDate);

            var webapps = [];
			var webappIndex = -1;
			var webappDetailsIndex = -1;
			var totalPageCount = [];
			var webappObject = {};
			var appPage = [];
			var apppageCount = [];
			var webappDeatails = [];

			for(x=0;x<usage.length;x++){
				for(y=0;y<webapps.length;y++){
					if(webapps[y][1] == usage[x].apiName){
						webappIndex = y;
						break;
					}
				}

				if(webappIndex == -1){
					var index = webapps.length;
					webapps.push([index,usage[x].apiName]);
					totalPageCount.push([index,usage[x].count]);
				}else {
					var total = totalPageCount[webappIndex][1] + usage[x].count ;
					totalPageCount[webappIndex][1] = total;
				}

				for(z=0;z<webappDeatails.length;z++){
					if(webappDeatails[z][0] == usage[x].apiName){
						webappDetailsIndex = z;
						break;
					}
				}

                if (webappDetailsIndex == -1) {

                    var referer = [];
                    var pageCount = [];
                    var index = 0;
                    referer.push([index, usage[x].referer]);
                    pageCount.push([usage[x].count, index]);
                    webappDeatails.push([usage[x].apiName, referer, pageCount]);

                } else {
                    //if same webpage is accessed by different users sum the count
                    var isReferExist = false;
                    var referer = webappDeatails[webappDetailsIndex][1];
                    for (i = 0; i < referer.length; i++) {
                        if (usage[x].referer == referer[i][1]) {
                            var index = referer[i][0];
                            var pageCount = webappDeatails[webappDetailsIndex][2];
                            for (j = 0; j < pageCount.length; j++) {
                                if (index == pageCount[j][1]) {
                                    pageCount[j][0] = pageCount[j][0] + usage[x].count;
                                    isReferExist = true;
                                    break;
                                }
                            }
                            break;

                        }
                    }
                    // same app but different page
                    if (!isReferExist) {
                        var index = webappDeatails[webappDetailsIndex][1].length;
                        webappDeatails[webappDetailsIndex][1].push([index, usage[x].referer]);
                        webappDeatails[webappDetailsIndex][2].push([usage[x].count, index]);
                    }

                }
                webappIndex = -1;
                webappDetailsIndex = -1;
            }




            var webapp = [];
            			for(x=0;x<usage.length;x++){

            				var webappIndex = -1;
            				var webappVersionIndex = -1;

            				for(y=0;y<webapp.length;y++){
            					if(webapp[y][0] == usage[x].apiName){
            						webappIndex = y;
            						var z;
            						for(z=0;z<webapp[y][1].length;z++){
            							if(webapp[y][1][z][0] == usage[x].version){
            								webappVersionIndex = z;
            								break;
            							}
            						}
            						if((webappVersionIndex == -1) && (z == webapps[y].length)){
            							break;
            						}
            					}
            				}

            				if(webappIndex == -1){
            					var version = [];
            					var requestCount = [];
            					requestCount.push([usage[x].referer,usage[x].count.toString()]);
            					version.push([usage[x].version,requestCount]);
            					webapp.push([usage[x].apiName,version]);
            				}else{
            					if(webappVersionIndex == -1){
            						var requestCount = [];
            						requestCount.push([usage[x].referer,usage[x].count.toString()]);
            						webapp[webappIndex][1].push([usage[x].version,requestCount]);
            					}
            					else{
            						webapp[webappIndex][1][webappVersionIndex][1].push([usage[x].referer,usage[x].count.toString()]);
            					}
            				}

            			}

            			if (usage == null) {
            				obj = {
            					error:true
            				};
            			} else {
            				obj = {
            					error:false,
            					webapp:webapp
            				};
            			}




			webappObject['usage'] = usage;
			webappObject['webapp'] = webapps;
			webappObject['webapp_'] = webapp;
			webappObject['totalPageCount'] = totalPageCount;
			webappObject['webappDeatails'] = webappDeatails;

			if (usage == null) {
				obj = {
					error:true
				};
			} else {
				obj = {
					error:false,
					webappObject:webappObject
				};
			}

            response.contentType = "application/json";
			print(webappObject);
		}else if (action == "getUsageByContext") {
            usage = appMgtProviderObj.getAPIUsageByUser("__all_providers__",startDate,endDate);



            			usage = parse(stringify(usage));


            			function orderByCountAscending(a, b) {
            				return b.count - a.count;
            			}

            			usage = usage.sort(orderByCountAscending);
            			var webapps = [];

            			for(x=0;x<usage.length;x++){

                                                var userIndex = -1;
                                				var webappIndex = -1;
                                				var webappVersionIndex = -1;
                                                var webresourceIndex = -1;


                                				for(y=0;y<webapps.length;y++){

                                					if(webapps[y][0] == usage[x].userId){
                                						userIndex = y;
                                						var z;
                                						for(z=0;z<webapps[y][1].length;z++){
                                							if(webapps[y][1][z][0] == usage[x].apiName){
                                								webappIndex = z;
                                                                var t;
                                                                for(t=0;t<webapps[y][1][z][1].length;t++){
                                                                    if(webapps[y][1][z][1][t][0] == usage[x].version){
                                                                        webappVersionIndex = t;
                                                                        var r;
                                                                            for(r=0;r<webapps[y][1][z][1][t][1].length;r++){
                                                                                if(webapps[y][1][z][1][t][1][r][0] == usage[x].context){
                                                                                    webresourceIndex = r;
                                                                                    break;

                                                                                }


                                                                            }

                                                                    }
                                                                }
                                							}
                                						}
                                						if((webappVersionIndex == -1) && (z == webapps[y].length)){
                                							break;
                                						}
                                					}
                                				}


                                				if(userIndex == -1){
                                                    var apps=[];
                                					var version = [];
                                					var requestCount = [];
                                                    var resourse =[];

                                                    requestCount.push([usage[x].count,usage[x].time]);
                                                    resourse.push([usage[x].context,requestCount]);
                                					version.push([usage[x].version,resourse]);
                                                    apps.push([usage[x].apiName,version])
                                					webapps.push([usage[x].userId,apps]);
                                				}else{
                                					if(webappIndex == -1){
                                                        var version = [];
                                						var requestCount = [];
                                                        var resourse =[];
                                                        requestCount.push([usage[x].count,usage[x].time]);
                                                    resourse.push([usage[x].context,requestCount]);
                                					version.push([usage[x].version,resourse]);
                                						webapps[userIndex][1].push([usage[x].apiName,version]);
                                                    }else{
                                                        if(webappVersionIndex == -1){
                                                            var requestCount = [];
                                                        var resourse =[];
                                                        requestCount.push([usage[x].count,usage[x].time]);
                                                    resourse.push([usage[x].context,requestCount]);
                                                            webapps[userIndex][1][webappIndex][1].push([usage[x].version,resourse]);
                                                        }else{
                                                            if(webresourceIndex == -1){
                                                                 var requestCount = [];
                                                                requestCount.push([usage[x].count,usage[x].time]);
                                						    webapps[userIndex][1][webappIndex][1][webappVersionIndex][1].push([usage[x].context,requestCount]);

                                                        }else{
                                                             webapps[userIndex][1][webappIndex][1][webappVersionIndex][1][webresourceIndex][1].push([usage[x].count,usage[x].time]);

                                                    }

                                				}

                                			}
                                                }
                                            }



            			if (usage == null) {
                            obj = {
                                error:true
                            };
                        } else {
                            obj = {
                                error:false,
                                webapps:webapps
                            };
                        }

                        response.contentType = "application/json";
                        print(webapps);
		}else if (action == "getCacheHit") { /* Overall Web Application Usage Graph */
         			usage = appMgtProviderObj.getcashHitMiss("__all_providers__",startDate,endDate);

         			usage = parse(stringify(usage));

                    var webapps = [];

                    for(x=0;x<usage.length;x++){

                        var userIndex = -1;
                        var webappIndex = -1;
                        var webappVersionIndex = -1;
                        var webresourceIndex = -1;


                        for(y=0;y<webapps.length;y++){

                            if(webapps[y][0] == usage[x].time){
                                userIndex = y;
                                var z;
                                for(z=0;z<webapps[y][1].length;z++){
                                    if(webapps[y][1][z][0] == usage[x].cachetHit){
                                        webappIndex = z;
                                        var t;
                                        for(t=0;t<webapps[y][1][z][1].length;t++){
                                            if(webapps[y][1][z][1][t][0] == usage[x].apiName){
                                                webappVersionIndex = t;
                                                var r;
                                                    for(r=0;r<webapps[y][1][z][1][t][1].length;r++){
                                                        if(webapps[y][1][z][1][t][1][r][0] == usage[x].version){
                                                            webresourceIndex = r;
                                                            break;

                                                        }


                                                    }

                                            }
                                        }
                                    }
                                }
                                if((webappVersionIndex == -1) && (z == webapps[y].length)){
                                    break;
                                }
                            }
                        }


                        if(userIndex == -1){
                            var apps=[];
                            var version = [];
                            var requestCount = [];
                            var resourse =[];

                            requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
                            resourse.push([usage[x].version,requestCount]);
                            version.push([usage[x].apiName,resourse]);
                            apps.push([usage[x].cachetHit,version])
                            webapps.push([usage[x].time,apps]);
                        }else{
                            if(webappIndex == -1){
                                var version = [];
                                var requestCount = [];
                                var resourse =[];
                                requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
                            resourse.push([usage[x].version,requestCount]);
                            version.push([usage[x].apiName,resourse]);
                                webapps[userIndex][1].push([usage[x].cachetHit,version]);
                            }else{
                                if(webappVersionIndex == -1){
                                    var requestCount = [];
                                var resourse =[];
                                requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
                            resourse.push([usage[x].version,requestCount]);
                                    webapps[userIndex][1][webappIndex][1].push([usage[x].apiName,resourse]);
                                }else{
                                    if(webresourceIndex == -1){
                                         var requestCount = [];
                                        requestCount.push([usage[x].fullRequestPath,usage[x].totalRequestCount]);
                                    webapps[userIndex][1][webappIndex][1][webappVersionIndex][1].push([usage[x].version,requestCount]);

                                }else{
                                     webapps[userIndex][1][webappIndex][1][webappVersionIndex][1][webresourceIndex][1].push([usage[x].fullRequestPath,usage[x].totalRequestCount]);

                            }

                        }

                    }
                        }
                    }



                    if (usage == null) {
                        obj = {
                            error:true
                        };
                    } else {
                        obj = {
                            error:false,
                            webapps:webapps
                        };
                    }

                    response.contentType = "application/json";
                    print(webapps);

         		}
                        else if (action == "getAppsPopularity") {
                            var output  = {};
                            usage = appMgtProviderObj.getAppsByPopularity("__all_providers__",startDate,endDate);
                            usage = parse(stringify(usage));

                            if (usage == null) {
                                obj = {
                                    error:true
                                };
                            } else {
                               obj = {
                                   error:false,
                                   usage:usage
                               };
                            }
                            response.contentType = "application/json";
                            print(usage);
                        }

    });


    var securityModule = require('/modules/security/security.manager.js').securityManagementModule();
    var sm = securityModule.cached();

    //This will short circuit the handling of the requests
    var passed = sm.check(session, function () {
        response.sendError(401);
    });

    //Stop servicing the request if the check failed
    if (passed) {
        routeManager.handle(request, response);
    }

}, request, response, session);
%>
