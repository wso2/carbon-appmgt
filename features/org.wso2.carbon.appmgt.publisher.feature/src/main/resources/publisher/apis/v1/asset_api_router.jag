<%

/*
 Description: Provides CRUD support for assets
 Note: type: shortName in the Rxt templates
 GET    api/asset/{type}            Provides the Rxt template
 GET    api/asset/{type}/{id}       Provides artifact details on the provided type
 POST   api/asset/{type}            Creates a new asset of the given type
 PUT    api/asset/{type}/{id}       Updates an asset with the given type and id
 DELETE asset/{type}/{id}           Deletes an asset with the provided type and id
 Filename:asset.js
 Created Date: 29/7/2013
 */

include("/extensions/webapp/modules/jagg/jagg.jag");

require('/modules/publisher.js').exec(function(ctx) {

    var config = require('/config/publisher.json');
    var dataConfigs = require('/config/publisher.js').config();
    var caramel = require('caramel');
    var apiProvider = jagg.module('manager').getAPIProviderObj();
    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    var log = new Log();
    var appmgtPublisher = require('appmgtpublisher');
    var auditLog = require('/modules/auditLog/logger.js');
    var CONTENT_TYPE_JSON = "application/json";

    /****************************MOBILE*******************************************/

    var mam_config = require('/extensions/mobileapp/config/mam-config.json');
    var server = require('store').server;
    var utility=require('/modules/utility.js').rxt_utility();
    var permissions=require('/modules/permissions.js').permissions;
    var contextPath = caramel.configs().context;

    var checkNonSpecial = function(value){
        var non_special_regex = /^[A-Za-z][A-Za-z0-9\s-]*$/;
        return non_special_regex.test(value);
    };

    var makeid= function(){
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for( var i=0; i < 15; i++ )
            text += possible.charAt(Math.floor(Math.random() * possible.length));

        return text;
    };

    var getExtensionText = function(extension){
        var index = extension.lastIndexOf('.');
        var ext = index < extension.length ? extension.substring(index + 1) : '';
        return ext;
    };

    var getExtension = function(file){
        var path = file.getName();
        var index = path.lastIndexOf('.');
        var ext = index < path.length ? path.substring(index + 1) : '';
        return ext;
    };

    var getFileOnly = function(file){
        var path = file.getName();
        var index = path.lastIndexOf('.');
        var name = index < path.length ? path.substring(0,index) : '';
        return name;
    };

    var saveFile = function(file){
        if(file!=undefined){
            var file_n= file.getName();
            file_n = "." + file_n.split('.').pop();
            if(file_n==""){
                return "";
            }
            var uid= makeid();

            if(mam_config.filePreciseLocation.substring(0, 1) === "/"){
                var file_name = mam_config.filePreciseLocation+uid+file_n;
            }else{
                var file_name = Packages.java.lang.System.getProperty("carbon.home") + "/" + mam_config.filePreciseLocation+uid+file_n;
            }


            var fileTemp=new File( 'file://' + file_name);
            try{
                fileTemp.open('w');
                fileTemp.write(file.getStream());
            }catch(e){
                print(e);
            } finally{
                fileTemp.close();
            }

            return contextPath + mam_config.fileAPILocation + uid + file_n;

        }
        return "";
    };

    var copyFile = function(fileName){
        if(fileName){
            var fileLocation ;

            if(mam_config.filePreciseLocation.substring(0, 1) === "/"){
                fileLocation = mam_config.filePreciseLocation;
            }else{
                fileLocation = Packages.java.lang.System.getProperty("carbon.home") + "/" + mam_config.filePreciseLocation;
            }
            //check existence of file
            var oldFile = new File('file://'+fileLocation+fileName);
            if(!oldFile.isExists()) {
                log.error("Image file does not exists :" + oldFile.getPath());
                return "";
            }


            //get old file extension
            var fileExtension = "." + fileName.split('.').pop();
            if(fileExtension==""){
                return "";
            }

            //create random id for new file name
            var uid= makeid();
            //copy file
            var newFileName = uid+fileExtension;
            var fileTemp=new File( 'file://' + fileLocation + newFileName);
            try{
                fileTemp.open('w');
                fileTemp.write(oldFile.getStream());
            }catch(e){
                log.error(e);
                log.error("Error while copying image file");
            } finally{
                fileTemp.close();
            }
            return contextPath + mam_config.fileAPILocation + newFileName;
        }
        return "";
    };

    var getBundleID = function(appid){
        try{
            var result =  get('https://itunes.apple.com/lookup?id='+appid).data;
            if(result!=null){
                log.debug(result);
                result = parse(result);
                if(result.resultCount==1){
                    var appinfo =  result.results[0];
                    var bundleId = appinfo.bundleId;
                    return bundleId;
                }
            }
        }catch(e){
            return null;
        }
    };

    var validateAppIdentifier = function(attributes, display_attribute){
        var artifactManager = rxtManager.getArtifactManager('mobileapp');

        var predicate={}
        predicate['attributes']=attributes;

        //Perform a search for an asset with the provided name
        var matches=artifactManager.find(function(asset){
            var equal=utility.assertEqualCaseSensitive(asset,predicate);
            return equal;
        },null);

        if(matches.length>0){
            response.contentType = CONTENT_TYPE_JSON;
            print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["App with identifer "+display_attribute+" and version "+attributes.overview_version+" already exists"]}})
            return true;
        }
    };

    /**************************END_MOBILE*****************************************/


    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}', function (context) {

        var shortName = (context.params.type) || '';

        var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
            return (template.shortName == shortName) ? true : false;
        });

        if (!rxtTemplate) {
            log.debug('The asset type: ' + shortName + ' could not be found');
            response.sendError(404, 'Asset type not found.'); //TODO: Replace
        }
        else {
            var model = modelManager.getModel(shortName);
            //Obtain the username from the session and populate the provider field

            var username=require('store').server.current(session).username;//.get('LOGGED_IN_USER');
            model.set('overview.provider',username);
            var output=model.export('form');

            response.contentType = CONTENT_TYPE_JSON;
            print(output);
        }
    });

    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/trackingid/{uuid}', function (context) {
        var output = {};
        var uuid = context.params.uuid;
        var trackinID = apiProvider.getTrackingID(uuid);
        output["TrackingID"] = trackinID;
        response.contentType = CONTENT_TYPE_JSON;
        print(output);
    });

    routeManager.register('PUT', 'publisher', '/publisher/api/asset/{type}/deploySample', function (context) {
        var webapps = require('/config/SampleWebappConfiguration.json');
        var sessionID = session.getId();
        var username = require('store').server.current(session).username;
        var request = {};
        request["username"] = stringify(username);
        request["creatorSession"] = sessionID;
        request["webapps"] = stringify(webapps);
        var deployerClass = Packages.org.wso2.carbon.appmgt.sample.deployer.deploy.Deployer;
        var deployerObj = new deployerClass();
        var msg = {};
        msg["isSampleDeployed"] = true;
        msg["isError"] = "true";
        msg["isNew"] = "true";
        try {
            var result = deployerObj.deploySample(request);
            if(result){
                msg["response"] = "Samples deployed succesfully. " +
                        "You can login to store using UserName : subscriber_" +username+
                        " Password : subscriber"
                msg["isError"] = "false";
            }else{
                msg["response"] = username+" has already created a sample web application"
                msg["isError"] = "true";
            }
        } catch (error){
            msg["response"] = error.message;
            msg["isError"] = "true";
        }

        session.put("deploysample", msg);
        response.contentType = "application/json";
        print(msg);
    });

    routeManager.register('POST', 'publisher', '/publisher/api/asset/version/copyapp/{type}/{id}', function (context){
        var appType = context.params.type;
        var parentAppId = context.params.id;
        var content = {status: "", message: []};

        // get artifact manager for appType
        var artifactManager = rxtManager.getSystemArtifactManager(appType, session);

        try {
            var parentArtifact = artifactManager.get(parentAppId);
        } catch (e) {
            // this exception is thrown by
            // GenericArtifactManager.getGenericArtifact(id) throws GovernanceException
            log.error("The copying " + appType + " with UUID " + parentAppId + " could not be retrieved.");
            log.error(e);
            response.status = 404;
            response.contentType = CONTENT_TYPE_JSON;
            content.status = "Not Found";
            content.message.push("The copying " + appType + " with UUID " + parentAppId
                                 + " could not be retrieved.");
            response.content = stringify(content);
            return;
        }

        if (appType == 'mobileapp') {
            copyMobileApp(parentArtifact, context);
        }
    });

    //delete asset
    routeManager.register('POST', 'publisher', '/publisher/api/asset/delete/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);
        var server  = require('store').server;
        var username = jagg.getUser().username;

        var um = server.userManager(server.current(session).tenantId);
        var deleteAuthorized = permissions.isAuthorized(username, config.permissions.webapp_delete, um);
        log.debug("## Delete Authorized Check : " + deleteAuthorized);

        var isDeleted = false;
        if(deleteAuthorized) {
            try {
                //Get the original artifact
                var originalArtifact = artifactManager.get(id);
                var attributes = originalArtifact.attributes;

                var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
                var webApp = Packages.org.wso2.carbon.appmgt.api.model.WebApp;

                var ssoProvider = Packages.org.wso2.carbon.appmgt.api.model.SSOProvider;
                //Create SSOProvider Object
                var ssoProviderObj = new ssoProvider();

                var appProvider = attributes["overview_provider"];
                var appName = attributes["overview_name"];
                var appVersion = attributes["overview_version"];
                var ssoProvider = attributes["sso_ssoProvider"];
                var result = null;
                var issuerName = null;
                var store = jagg.module("manager").getAPIStoreObj();
                var isEmailLoginEnabled = store.isEnableEmailUsername();

                //Check whether application author is a tenant
                if (!isEmailLoginEnabled && appProvider != null && appProvider.indexOf("-AT-") != -1) {
                    result = appProvider.split("-AT-");
                }
                if (result != null) {
                    issuerName = appName + "-" + result[1] + "-" + appVersion;
                } else {
                    issuerName = appName + "-" + appVersion;
                }

                var apiIdentifierObj = new apiIdentifier(appProvider, appName, appVersion);

                /*
                if (apiProvider.isDefaultVersion(apiIdentifierObj) && apiProvider.hasMoreVersions(apiIdentifierObj)) {
                    msg['isDeleted'] = false;
                    msg['message'] =
                    'Delete is not permitted as this is the default version of the application. '
                    + 'Please select other version of this application as the default version and proceed.';
                    msg['ok'] = false;
                    msg['message'] =
                    'Delete is not permitted as this is the default version of the application. '
                    + 'Please select other version of this application as the default version and proceed.';
                    response.contentType = CONTENT_TYPE_JSON;
                    print(msg);
                    return;
                }
                */

                if (ssoProvider != " ") {
                    ssoProviderObj.setProviderName(ssoProvider.split("-")[0]);
                    ssoProviderObj.setProviderVersion(ssoProvider.split("-")[1]);
                    ssoProviderObj.setIssuerName(issuerName);
                } else {
                    ssoProviderObj = null;
                }

                var isAdvertiseOnly = attributes["overview_advertiseOnly"].trim();
                if (isAdvertiseOnly.toLowerCase() == "true") {
                    isDeleted = removeArtifactOnly(shortName, id);
                } else {
                    isDeleted = apiProvider.deleteApp(apiIdentifierObj, String(username), ssoProviderObj);
                }

                response.contentType = CONTENT_TYPE_JSON;
                if (isDeleted == true) {
                    msg['isDeleted'] = true;
                    msg['message'] = 'Web Application is successfully deleted';
                    print(msg);
                    var tenantId = server.current(session).tenantId;
                    auditLog.writeLog(tenantId, username, "AssetDeleted", shortName, "{" +
                                                                                     "providerName='"
                                                                                     + attributes["overview_provider"]
                                                                                     + '\'' +
                                                                                     ", apiName='"
                                                                                     + attributes["overview_name"]
                                                                                     + '\'' +
                                                                                     ", version='"
                                                                                     + attributes["overview_version"]
                                                                                     + '\'' +
                                                                                     '}', originalArtifact);
                } else if (isDeleted == false) {
                    msg['isDeleted'] = false;
                    msg['message'] = 'Web Application delete failed due to active subscriptions';
                    print(msg);
                } else {
                    msg['isDeleted'] = false;
                    msg['message'] = 'Web Application delete failed';
                    print(msg);
                }

            } catch (e) {
                log.debug('The asset ' + id + ' could not be deleted.The following exception was thrown: ' + e);
                response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
            }
        }else{
            msg['isDeleted'] = false;
            msg['message'] = 'Delete is not permitted due to insufficient privileges';
            msg['ok'] = false;
            msg['message'] = 'Delete not permitted. Insufficient privilages.';
            response.contentType = CONTENT_TYPE_JSON;
            print(msg);
        }
    });

    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {

        var shortName = context.params.type;

        var id = context.params.id;

        var artifactManager = rxtManager.getArtifactManager(shortName);

        //If the id is not found it will throw a conversion exception
        try {

            var artifact = artifactManager.get(id);

            //Perform some filerting logic
            artifact=filterManager.filter(artifact,session);

            if(!artifact){
                response.sendError(401,'You do not have viewing rights for this asset');
                return;
            }

            //Customize the resource for the current app
            dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

            response.contentType = "application/json";
            print(artifact);
        } catch (e) {

            log.debug('The asset type: ' + shortName + ' with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
            response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check the server logs.');
        }

    });

    routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}', function (context) {
        var shortName = context.params.type;
        var artifactManager = rxtManager.getArtifactManager(shortName);

        var carbon = require('carbon');
        var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');



        //check for mobile
        if(shortName === "mobileapp"){
            addNewMobileApp(context, rxtManager);
            return;
        }


        //Check if the type is valid
        try {

            var model=modelManager.getModel(shortName);

            //assigning default thumbnail and banner if not provided.
            if(context.post['images_thumbnail'] == '') {
                context.post['images_thumbnail'] = contextPath + '/config/defaults/img/thumbnail.jpg';
            }
            if(context.post['images_banner'] == '') {
                context.post['images_banner'] = contextPath + '/config/defaults/img/banner.jpg';
            }



            model.import('form.importer',context.post);

            //Perform validations on the asset
            var report=model.validate();

            //If the report indicates the model has failed validations send an error
            if((report)&&(report.failed)){
                response.contentType = CONTENT_TYPE_JSON;
                print({ok:false,message:'Validation failure',report:report});
                return;
            }

            //var assetModel = getModel(context.post);

            model.save();

            //var createdAsset = artifactManager.add(assetModel);

            //Get the model id
            var idField = model.get('*.id');

            try{
                social.warmUpRatingCache(shortName + ':' + idField.value);
            }catch(e) {
                log.warn("Unable to publish the asset: " + shortName + ":" + idField.value + " to social cache. This may affect on sort by popularity function.");
            }


            if (idField) {
                response.contentType = CONTENT_TYPE_JSON;
                print({ok: 'true', message: 'Asset created.', id: idField.value});
            }
            else {
                log.debug('An asset of type: ' + shortName + ' could not be created.Probably a fault with publisher logic!');
            }

        }
        catch (e) {
            log.debug('An asset of type: ' + shortName + ' could not be created.The following exception was thrown: ' + e);
            response.sendError(500, 'An asset of type: ' + shortName + ' could not be created.Please check the server logs.');
        }

    });

    routeManager.register('GET', 'publisher', '/publisher/api/asset/userRoles/{type}/{id}', function (context) {




        var type = context.params.type;
        var id = context.params.id;

        var artifactManager = rxtManager.getArtifactManager(type);

        var artifact = artifactManager.get(id);

        //Obtain the path of the asset
        var path = artifact.path;

        //Obtain the tags
        var tags = rxtManager.registry.tags(path);

        //Create a tag array
        var counter = 0;
        var tagArray = [];

        for (var index in tags) {
            tagArray.push({id: counter, name: tags[index]});
        }
        response.contentType = "application/json";
        print(tagArray);
    });

    //update asset
    routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
        var shortName = context.params.type;
        if(shortName === "mobileapp"){

            editMobileApp(context, rxtManager);
            return;
        }
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);

        var server  = require('store').server;
        var username = server.current(session).username;

        var user = server.current(session);
        var um = server.userManager(server.current(session).tenantId);
        var updateAuthorized = permissions.isAuthorized(username, config.permissions.webapp_update, um);

        if(context.post['images_thumbnail'] instanceof Array){
            context.post['images_thumbnail'] = context.post['images_thumbnail'][0];
        }
        if(context.post['images_banner'] instanceof Array){
            context.post['images_banner'] = context.post['images_banner'][0];
        }

        if(updateAuthorized) {
            try {
            var originalArtifact = artifactManager.get(id);
            var editEnabled = permissions.isEditPermitted(username, originalArtifact.path, um);
            if(!editEnabled){
                response.contentType = 'application/json';
                msg['ok'] = false;
                msg['message'] = 'Update Failed. Can not update in ' + originalArtifact.lifecycleState + ' state.';
                response.contentType = CONTENT_TYPE_JSON;
                print(msg);
                return;
            }

            var modelA = modelManager.getModel(shortName);
            var modelB = modelManager.getModel(shortName);

            //Handle any files
            inspectFiles(request,context.post);


            //Get the original artifact
            if(context.post["images_thumbnail"] == ""){
                context.post["images_thumbnail"] = originalArtifact.attributes["images_thumbnail"];
            }
            if(context.post["images_banner"] == ""){
                context.post["images_banner"] = originalArtifact.attributes["images_banner"];
            }

            var appOwner = originalArtifact.attributes["overview_appOwner"];
            var appTenant = originalArtifact.attributes["overview_appTenant"];
            var isAdvertiseOnly = originalArtifact.attributes["overview_advertiseOnly"];

            modelA.import('form.importer', context.post);

            //Validation requires the lifecycle state
            modelA.set('*.lifecycleState',originalArtifact.lifecycleState);

            var report=modelA.validate();
            //Check if the validation check has failed
            if((report)&&(report.failed)){

                msg['ok']=false;
                msg['report']=report;
                response.contentType = CONTENT_TYPE_JSON;
                print(msg);
                log.debug(msg);
                return;
            }


            modelA.set('*.id', id);

            modelB.import('asset', originalArtifact);

            //Checks whether two models are equal
            var reqProps=['overview.name', 'overview.provider', 'overview.version']
            var businesOwner = context.post["overview_owner"];
            var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

                //If they are not equal,abort the operation
                if (!isEqual) {
                    log.debug('trying to get fields which are different');
                    var diff = modelManager.diff(modelA, modelB, reqProps);
                    response.sendError(406,
                                       'The name,provider and version of an asset cannot be changed.The following fields'
                                       + ' were modified: ' + diff);
                    return;
                }
                modelA.set("overview.createdtime", modelB.get("overview.createdtime").value);
                var artifact = modelA.export('asset.exporter');
                artifact.attributes["overview_appOwner"] = appOwner;
                artifact.attributes["overview_appTenant"] = appTenant;
                artifact.attributes["overview_advertiseOnly"] = isAdvertiseOnly;
                artifact.attributes["overview_ownerAdvertise"] = isAdvertiseOnly;
                artifact.attributes["overview_owner"] = businesOwner;


            var tenantId = server.current(session).tenantId;
            var tenantDomain = carbon.server.tenantDomain({tenantId:tenantId});
            var subscriptionAvailability = (artifact.attributes["overview_subscriptionAvailability"]).trim();
            if (subscriptionAvailability == "current_tenant") {
                artifact.attributes["overview_tenants"] = tenantDomain;
            }

            if (subscriptionAvailability == "all_tenants") {
                artifact.attributes["overview_tenants"] = "";
            }
            var saml2SsoIssuer = null;
            if (tenantId == -1234) {
                saml2SsoIssuer = artifact.attributes["overview_name"] + "-" + artifact.attributes["overview_version"];
            } else {
                saml2SsoIssuer = artifact.attributes["overview_name"] + "-" + tenantDomain + "-" + artifact.attributes["overview_version"];
            }
            // update sso detail
            var idpProviderUrl = dataConfigs.ssoConfiguration.identityProviderURL;
            var ssoEnabled = dataConfigs.ssoConfiguration.enabled;
            artifact.attributes["sso_idpProviderUrl"] = idpProviderUrl;
            artifact.attributes["sso_saml2SsoIssuer"] = saml2SsoIssuer;
            if (ssoEnabled) {
                artifact.attributes["sso_singleSignOn"] = "Enabled";
            } else {
                artifact.attributes["sso_singleSignOn"] = "Disabled";
            }


            var index = 0;
            var uritemplate = "uritemplate_urlPattern" + index;

            while (uritemplate in artifact.attributes) {
                var urlPattern = artifact.attributes['uritemplate_urlPattern'+index];
                if(urlPattern == "null" || urlPattern == "" ){
                    var key_pattern = 'uritemplate_urlPattern'+index;
                    var key_httpVerb = 'uritemplate_httpVerb' + index;
                    var key_policyGroupId = 'uritemplate_policygroupid' + index;

                    delete artifact.attributes[key_pattern];
                    delete artifact.attributes[key_httpVerb];
                    delete artifact.attributes[key_policyGroupId];
                }
                index++;
                uritemplate = "uritemplate_urlPattern" + index;
            }

            dataInjector.inject(artifact,DataInjectorModes.UPDATE);

            artifactManager.update(artifact);

            // dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

            var update = apiProvider.updateAPI(artifact);

            var attributes = artifact.attributes;

            //Update entitlement policies of the web application
            updateEntitlementPolicies(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);

            //update OAuth APIs consumer details per given web-app
            var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
            var apiIdentifierObj = new apiIdentifier(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);

            var webApp = Packages.org.wso2.carbon.appmgt.api.model.WebApp;
            var webAppObj = new webApp(apiIdentifierObj);

            var appMDAO = Packages.org.wso2.carbon.appmgt.impl.dao.AppMDAO;
            var appMDAOObj = new appMDAO();

	    var tenantId = server.current(session).tenantId;

            appMDAOObj.updateOAuthAPIAccessInfo(webAppObj, tenantId);

            var count = 1;
            var tokenEndpoint = attributes["oauthapis_apiTokenEndpoint" + count];

	    var tenantId = server.current(session).tenantId;
	    var tenantDomain = carbon.server.tenantDomain({tenantId:tenantId});
	    var saml2SsoIssuer = null;
	    if (tenantId == -1234) {
		saml2SsoIssuer = attributes["overview_name"] + "-" + attributes["overview_version"];
	    } else {
		saml2SsoIssuer = attributes["overview_name"] + "-" + tenantDomain + "-" + attributes["overview_version"];
	    }

            while (tokenEndpoint != null && tokenEndpoint.trim().length > 0) {

                webAppObj.setTokenEndpoint(attributes["oauthapis_apiTokenEndpoint" + count]);
                webAppObj.setApiConsumerKey(attributes["oauthapis_apiConsumerKey" + count]);
                webAppObj.setApiConsumerSecret(attributes["oauthapis_apiConsumerSecret" + count]);
                webAppObj.setApiName(attributes["oauthapis_apiName" + count]);
		webAppObj.setSaml2SsoIssuer(saml2SsoIssuer);

                count++;
                tokenEndpoint = attributes["oauthapis_apiTokenEndpoint" + count];

                //Save OAuth APIs consumer details per given web-app
                appMDAOObj.addOAuthAPIAccessInfo(webAppObj, tenantId);
            }

            var artifactManagerForUpdate = rxtManager.getSystemArtifactManager(shortName,session);

            if(originalArtifact.lifecycleState=="Approved") {
                var updateLCArtifact = artifactManager.get(id);
                artifactManagerForUpdate.promoteLifecycleState("Revert", updateLCArtifact);
            }
                auditLog.writeLog(tenantId, username, "AssetUpdated", shortName, "{" +
                                                                                 "providerName='"
                                                                                 + attributes["overview_provider"]
                                                                                 + '\'' +
                                                                                 ", apiName='"
                                                                                 + attributes["overview_name"] + '\'' +
                                                                                 ", version='"
                                                                                 + attributes["overview_version"] + '\''
                                                                                 +
                                                                                 '}', originalArtifact, artifact);
            msg['ok']=true;
            msg['message']='asset updated';
            msg['asset']=artifact;
            response.contentType = CONTENT_TYPE_JSON;
            print(msg);


            } catch (e) {
                log.warn(e)
                log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
                response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
            }
        }else{
            msg['ok'] = false;
            msg['message'] = 'Update Failed. Insufficient privilages.';
            response.contentType = CONTENT_TYPE_JSON;
            print(msg);
            return;
        }
    });

    /**
     * Saves external entitlement policies.
     */
    function saveExternalEntitlementPolicies(params){

        var policies = parse(params['entitlementPolicies']);
        var policiesToBeSaved = new Array();

        var EntitlementPolicy = Packages.org.wso2.carbon.appmgt.api.model.entitlement.EntitlementPolicy;
        var entitlementPolicy;
        for(var i = 0; i < policies.length; i++){
            if(policies[i]){
                entitlementPolicy  = new EntitlementPolicy();
                entitlementPolicy.setPolicyId(policies[i]['id']);
                entitlementPolicy.setPolicyContent(policies[i]['content']);
                policiesToBeSaved.push(entitlementPolicy);
            }

        }

        if(policiesToBeSaved.length > 0){
            apiProvider.saveEntitlementPolicies(policiesToBeSaved);
        }

    }

    /**
     * Update entitlement policies.
     */
    function updateEntitlementPolicies(overviewProvider,overviewName,overviewVersion){

        // Save external entitlement policies
        var webappId={};
        webappId.provider= overviewProvider;
        webappId.name= overviewName;
        webappId.version= overviewVersion;
        apiProvider.generateEntitlementPolicies(webappId);
    }

    /*
     The function inspects the files sent with a request.If files are found
     they are added to Storage and then the generated uuids are added to
     the POST parameter object
     @req: A request object
     @params: The POST parameters
     */
    function inspectFiles(req, params) {
        var files = req.getAllFiles();
        var fileName;
        var file;
        var uuid = '';
        var extension;
        var thumbnail;
        var banner;

        var storageManager = new storageModule.StorageManager({
            context: 'storage',
            isCached: false,
            connectionInfo: {
                dataSource: storageConfig.dataSource
            }
        });


        for (var index in files) {

            file = files[index];

            log.debug('file: ' + index);

            //Put the file in storage and get a uuid as a reference
            var resource = {};
            resource['file'] = file;
            extension = utility.fileio.getExtension(file);
            resource['contentType'] = utility.fileio.getContentType(extension);

            uuid=storageManager.put(resource);

            log.debug('uuid added: '+uuid);

            //Add a new  entry into the POST parameters containing the uuid
            params[index] = uuid;

        }
    }

    routeManager.register('PUT', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);


        try {
            var modelA = modelManager.getModel(shortName);
            var modelB = modelManager.getModel(shortName);

            //Get the original artifact
            var originalArtifact = artifactManager.get(id);

            modelA.import('form.importer', context.content);

            //Validation requires the lifecycle state
            modelA.set('*.lifecycleState',originalArtifact.lifecycleState);

            var report=modelA.validate();

            //Check if the validation check has failed
            if((report)&&(report.failed)){

                msg['ok']=false;
                msg['report']=report;
                response.contentType = CONTENT_TYPE_JSON;
                print(msg);
                return;
            }

            modelA.set('*.id', id);

            modelB.import('asset', originalArtifact);

            //Checks whether two models are equal
            var reqProps=['overview.name', 'overview.provider', 'overview.version']

            var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

            //If they are not equal,abort the operation
            if (!isEqual) {
                log.debug('trying to get fields which are different');
                var diff=modelManager.diff(modelA,modelB,reqProps);
                response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
                        +' were modified: '+diff);
                return;
            }
            modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
            var artifact = modelA.export('asset.exporter');

            log.debug('not updating'+artifact);
            //artifactManager.update(artifact);

            msg['ok']=true;
            msg['message']='asset updated';
            response.contentType = CONTENT_TYPE_JSON;
            print(msg);

        } catch (e) {
            log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
            response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
        }
    });

    routeManager.register('DELETE', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var id = context.params.id;

        var artifactManager = rxtManager.getArtifactManager(shortName);

        try {
            artifactManager.remove(id);
            response.contentType = CONTENT_TYPE_JSON;
            print({ok: 'true', message: 'Asset deleted'});
        } catch (e) {
            log.debug('Asset ' + id + 'could not be removed.An exception was thrown: ' + e);
            response.sendError(404, 'Asset with id: ' + id + ' could not be removed.');
        }


    });

    //get uuid of given asset for-> provider,name,version
    routeManager.register('GET', 'publisher', '/publisher/api/asset/get/uuid/{type}/{provider}/{name}/{version}',
            function (context) {
                var assetProvider = context.params.provider;
                var assetName = context.params.name;
                var assetVersion = context.params.version;
                var shortName = context.params.type;
                var artifactManager = rxtManager.getArtifactManager(shortName);

                var fn = function (asset) {
                    var cond1 = (asset.attributes.overview_provider == assetProvider ) ? true : false;
                    var cond2 = (asset.attributes.overview_name == assetName ) ? true : false;
                    var cond3 = (asset.attributes.overview_version == assetVersion ) ? true : false;
                    return (cond1 && cond2 && cond3);
                }

                var artifact = artifactManager.find(fn, null);
                if (artifact && artifact != null && artifact.length > 0) {
                    var artifactId = artifact[0].id;
                    var res = {error: false, uuid: artifactId};
                    response.contentType = CONTENT_TYPE_JSON;
                    print(res);
                } else {
                    var res = {error: false, uuid: null , message :'Could not find UUID for given webapp'};
                    response.contentType = CONTENT_TYPE_JSON;
                    print(res);
                }


            });


    //get uuid of given asset for-> provider,name,lifecycle state
    routeManager.register('GET', 'publisher', '/publisher/api/asset/get/uuid/list/state/{type}/{provider}/{name}/{lifecyclestate}',
                          function (context) {
                              var assetProvider = context.params.provider;
                              var assetName = context.params.name;
                              var lifecycleState = context.params.lifecyclestate;
                              var shortName = context.params.type;
                              var artifactManager = rxtManager.getArtifactManager(shortName);
                              var fn = function (asset) {
                                      var cond1 = (asset.attributes.overview_provider == assetProvider ) ? true : false;
                                      var cond2 = (asset.attributes.overview_name == assetName ) ? true : false;
                                      var cond3 = (asset.lifecycleState == lifecycleState ) ? true : false;
                                      return (cond1 && cond2 && cond3);
                                  }

                              var artifacts = artifactManager.find(fn, null);
                              var noOfArtifacts = 0;
                              var UUIDs = [];

                              for (noOfArtifacts = 0; noOfArtifacts < artifacts.length; noOfArtifacts++) {
                                  var artifactId = artifacts[noOfArtifacts].id;
                                       UUIDs.push(artifactId);
                              }
                              if (UUIDs.length > 0) {
                                  var res = {error: false, uuids: UUIDs, count: noOfArtifacts};
                                  response.contentType = CONTENT_TYPE_JSON;
                                       print(res);
                              } else {
                                        var res = {error: false, uuids: UUIDs, message: 'Could not find UUID for given webapp'};
                                        response.contentType = CONTENT_TYPE_JSON;
                                        print(res);
                                     }
                          });

    //Get external
    routeManager.register('GET', 'publisher', '/publisher/api/asset/get/external/stores/{type}/{provider}/{name}/{version}',
            function (context) {
                var appProvider = context.params.provider;
                var appName = context.params.name;
                var appVersion = context.params.version;

                try {
                    var externalAppStores = apiProvider.getExternalAppStoresList(appProvider, appName, appVersion);
                    if (externalAppStores && externalAppStores != null) {
                        var res = {};
                        res.error = false;
                        res.appStores = externalAppStores;
                        response.contentType = CONTENT_TYPE_JSON;
                        print(res);
                    }
                } catch (e) {
                    if (log.isDebugEnabled()) {
                        log.debug('Could not get external app store details for app:' + appProvider + '-' + appName + '' +
                                '-' + appVersion + "->" + e);
                    }
                    response.contentType = CONTENT_TYPE_JSON;
                    var res = {error: true, appStores: null}
                }

            });

    //update external app stores
    routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}/update/external/stores/{provider}/{name}/{version}',
            function (context) {
                var provider = context.params.provider;
                var name = context.params.name;
                var version = context.params.version;
                var data = context.request.getContent();
                var status = false;

                try {
                    apiProvider.updateExternalAppStores(provider, name, version, data);
                    var res = {};
                    res.success = true;
                    response.contentType = CONTENT_TYPE_JSON;
                    print(res);
                } catch (e) {
                    var errorMsg = 'Could not update the external stores for app : ' + provider + '-' + name + '' +
                            '-' + version + '. An exception was thrown.';
                    if (log.isDebugEnabled()) {
                        log.debug(errorMsg + ': ' + e);
                    }
                    var res = {};
                    res.success = false;
                    res.message = errorMsg;
                    response.contentType = CONTENT_TYPE_JSON;
                    print(res);
                }

            });


    routeManager.register('GET', 'publisher', '/publisher/api/asset/default/version/{appName}/{providerName}/{appStatus}', function (context) {
        var defaultVersion = getDefaultVersion(context.params.appName, context.params.providerName,
                                               context.params.appStatus);
        print(defaultVersion);
    });


    //check if the default version
    function getDefaultVersion(appName, providerName, appStatus) {
        return apiProvider.getDefaultVersion(appName, providerName, appStatus);
    }


    function removeArtifactOnly(type, uuid) {
        var shortName = type;
        var id = uuid;
        var artifactManager = rxtManager.getArtifactManager(shortName);

        try {
            artifactManager.remove(id);
            return true;
        } catch (e) {
            if (log.isDebugEnabled()) {
                log.debug('Asset ' + id + 'could not be removed.An exception was thrown: ' + e);
            }
            return false;
        }
    }



    /**************** MOBILE APP *********************************************************/

    function addNewMobileApp(context, rxtManager){


        var shortName = context.params.type;


        var artifactManager = rxtManager.getArtifactManager(shortName);




        //Check if the type is valid
        try {

            var model=modelManager.getModel(shortName);

            //assigning default thumbnail and banner if not provided.
            if(context.post['images_thumbnail'] == '') {
                context.post['images_thumbnail'] = contextPath + '/config/defaults/img/thumbnail.jpg';
            }
            if(context.post['images_banner'] == '') {
                context.post['images_banner'] = contextPath + '/config/defaults/img/banner.jpg';
            }

            if(shortName !="mobileapp"){
                model.import('form.importer',context.post);
            }

            if(shortName =="mobileapp"){
                var username= server.current(session).username.replace('@', '-AT-');
                var ctx = context.post;
                log.debug(ctx);
                var files = request.getAllFiles();
                var banner = files['bannerFile'];
                banner = saveFile(banner);

                var icon = files['iconFile'];
                icon = saveFile(icon);

                var screenshot1 = files['screenshot1File'];
                screenshot1 = saveFile(screenshot1);

                var screenshot2 = files['screenshot2File'];
                screenshot2 = saveFile(screenshot2);

                var screenshot3 = files['screenshot3File'];
                screenshot3 = saveFile(screenshot3);

                var screenshots = screenshot1+","+screenshot2+","+screenshot3;
                log.debug(screenshots);

                if(screenshots==",,"){
                    response.contentType = CONTENT_TYPE_JSON;
                    print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Screenshots not added"]}})
                    return;
                }
                var meta = ctx['appmeta'];
                log.debug(stringify(meta));
                if(meta == undefined || meta==""){
                    log.debug("Application meta data was not found");
                    response.sendError(500, 'Application meta data was not found');
                    return;
                }
                meta = parse(unescape(meta));
                var version = ctx.version;
                model.set('overview.bundleversion', version);
                model.set('overview.packagename', meta.package);
                if(ctx.markettype!='enterprise' && ctx.platform.toUpperCase()=="IOS"){
                    var bundleId = getBundleID(meta.package);
                    if(bundleId==null){
                        response.contentType = CONTENT_TYPE_JSON;
                        print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["App ID is invalid"]}})
                        return;
                    }else{
                        if(validateAppIdentifier({"overview_appid": meta.package, "overview_version":version},meta.package)){
                            return;
                        }
                        model.set('overview.packagename', bundleId);
                        model.set('overview.appid', meta.package);
                    }
                }else if(ctx.platform.toUpperCase()=="ANDROID"){
                    if(ctx.markettype=='enterprise' ){
                        if(getExtensionText(meta.path)!="apk"){
                            response.contentType = CONTENT_TYPE_JSON;
                            print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["File uploaded is not supported by Android"]}})
                            return;
                        }
                    }
                    if(validateAppIdentifier({"overview_packagename": meta.package, "overview_version":version}, meta.package)){
                        return;
                    }
                }else if(ctx.platform.toUpperCase()=="IOS" && ctx.markettype!='Market'){
                    if(getExtensionText(meta.path)!="ipa"){
                        response.contentType = CONTENT_TYPE_JSON;
                        print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["File uploaded is not supported by iOS"]}})
                        return;
                    }
                }
                if(!meta.weburl){
                    model.set('overview.url', meta.path);
                }else{

                    if(url_reg(meta.weburl)){
                        if(validateAppIdentifier({"overview_url": meta.weburl, "overview_version":version},meta.weburl)){
                            return;
                        }
                        model.set('overview.url', meta.weburl);
                    }else{
                        response.contentType = CONTENT_TYPE_JSON;
                        print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Invalid weburl"]}})
                        return;
                    }
                }
                model.set('overview.version', version);
                if(!checkNonSpecial(ctx.name)){
                    response.contentType = CONTENT_TYPE_JSON;
                    print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Special characters found in name"]}})
                    return;
                }
                model.set('overview.name',ctx.name);
                model.set('overview.displayName', ctx.displayName);
                model.set('overview.category',ctx.category);
                model.set('overview.platform',ctx.platform);
                model.set('overview.provider', username);
                model.set('overview.visibility',ctx.visibility);
                model.set('overview.description',ctx.description);
                model.set('overview.type',ctx.markettype);
                if(ctx.recentChanges == ""){
                    ctx.recentChanges = "-";
                }
                model.set('overview.recentchanges',ctx.recentChanges);
                model.set('images.thumbnail',icon);
                model.set('images.banner',banner);
                model.set('images.screenshots',screenshots);

            }

            //Perform validations on the asset
            var report=model.validate();

            //If the report indicates the model has failed validations send an error
            if((report)&&(report.failed)){
                response.contentType = CONTENT_TYPE_JSON;
                print({ok:false,message:'Validation failure',report:report});
                return;
            }

            //var assetModel = getModel(context.post);

            model.save();

            //var createdAsset = artifactManager.add(assetModel);

            log.debug('finished saving');

            //Get the model id
            var idField = model.get('*.id');

            log.debug('obtained idField');
            //update visibility
            var roles = context.post['visibility'];
            updateVisibility(roles,idField.value,rxtManager,shortName);

            //add tags
            var tags = context.post['tags'];
            addTags(tags,idField.value,rxtManager,shortName);

            try{
                //add rating- 0.0 to newly created app otherwise this app will not be displayed when sort the app
                //by popularity(ratings) in store.
                var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');
                social.warmUpRatingCache(shortName + ':' + idField.value);
            }catch(e) {
                log.warn("Unable to publish the asset: " + shortName + ":" + idField.value + " to social cache. This may affect on sort by popularity function.");
            }

            var asset=model.export('asset.exporter');
            var assetCachingModule=require('/modules/cache/cache.manager.js').assetCachingModule();
            var assetCacheManager=new assetCachingModule.AssetCacheManager(session);
            assetCacheManager.add(asset,shortName);

            if (idField) {
                response.contentType = CONTENT_TYPE_JSON;
                print({ok: 'true', message: 'Asset created.', id: idField.value});
            }
            else {
                log.debug('An asset of type: ' + shortName + ' could not be created.Probably a fault with publisher logic!');
            }

        }
        catch (e) {
            log.error(e);
            log.error('An asset of type: ' + shortName + ' could not be created.');
            response.sendError(500, 'An asset of type: ' + shortName + ' could not be created.Please check the server logs.');
        }




    }

    function editMobileApp(context, rxtManager){

        var shortName = context.params.type;
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);

        if(context.post['images_thumbnail'] instanceof Array){
            context.post['images_thumbnail'] = context.post['images_thumbnail'][0];
        }
        if(context.post['images_banner'] instanceof Array){
            context.post['images_banner'] = context.post['images_banner'][0];
        }

        try {
            var modelA = modelManager.getModel(shortName);
            var modelB = modelManager.getModel(shortName);

            //Handle any files
            inspectFiles(request,context.post);

            //Get the original artifact
            var originalArtifact = artifactManager.get(id);


            //Validation requires the lifecycle state
            modelA.set('*.lifecycleState', originalArtifact.lifecycleState);


            if(shortName != "mobileapp"){
                modelA.import('form.importer',context.post);
            }

            if(shortName =="mobileapp"){
                modelA.import('asset', originalArtifact);
                var username= server.current(session).username.replace('@', '-AT-');
                var ctx = context.post;
                var files = request.getAllFiles();
                var banner = files['bannerFile'];
                if(banner){
                    banner = saveFile(banner);
                    modelA.set('images.banner',banner);
                }
                var icon = files['iconFile'];
                if(icon){
                    icon = saveFile(icon);
                    modelA.set('images.thumbnail',icon);
                }

                var screenshot1 = files['screenshot1File'];
                screenshot1 = saveFile(screenshot1);

                var screenshot2 = files['screenshot2File'];
                screenshot2 = saveFile(screenshot2);

                var screenshot3 = files['screenshot3File'];
                screenshot3 = saveFile(screenshot3);


                var screenshots = screenshot1+","+screenshot2+","+screenshot3;


               var ssValues =  modelA.get('images.screenshots').value;
                ssValues = ssValues.split(",");
                if(screenshot1 != "") ssValues[0] = screenshot1;
                if(screenshot2 != "" ) ssValues[1] = screenshot2;
                if(screenshot3 != "") ssValues[2] = screenshot3;


                if(screenshots!=",,"){
                    modelA.set('images.screenshots',ssValues.join());
                }
                if(!checkNonSpecial(ctx.name)){
                    response.contentType = CONTENT_TYPE_JSON;
                    print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Special characters found in name"]}});
                    return;
                }
                modelA.set('overview.name',originalArtifact.attributes.overview_name);
				modelA.set('overview.displayName', ctx.displayName);
                modelA.set('overview.version', originalArtifact.attributes.overview_version);
                modelA.set('overview.visibility',ctx.visibility);
                modelA.set('overview.category',ctx.category);
                modelA.set('overview.description',ctx.description);
                modelA.set('overview.recentchanges',ctx.recentChanges);
                modelA.set('overview.provider', originalArtifact.attributes.overview_provider);
            }
            var report=modelA.validate();

            //Check if the validation check has failed
            if((report)&&(report.failed)){
                msg['ok']=false;
                msg['report']=report;
                response.contentType = CONTENT_TYPE_JSON;
                print(msg);
                log.debug(msg);
                return;
            }


            modelA.set('*.id', id);

            modelB.import('asset', originalArtifact);

            //Checks whether two models are equal
            var reqProps=['overview.name', 'overview.provider', 'overview.version']

            var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

            //If they are not equal,abort the operation
            if (!isEqual) {
                log.debug('trying to get fields which are different');
                var diff=modelManager.diff(modelA,modelB,reqProps);
                response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
                        +' were modified: '+diff);
                return;
            }
            modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
            var artifact = modelA.export('asset.exporter');

            dataInjector.inject(artifact,DataInjectorModes.UPDATE);

            artifactManager.update(artifact);

            //Update visibility
            var roles = context.post['visibility'];
            updateVisibility(roles,artifact.id,rxtManager,shortName);

            //Update tags
            var tags = context.post['tags'];
            updateTags(tags,artifact.id,rxtManager,shortName);

            msg['ok']=true;
            msg['message']='asset updated';
            msg['asset']=artifact;
            response.contentType = CONTENT_TYPE_JSON;
            print(msg);

        } catch (e) {
			log.error('The asset ' + id + ' could not be updated.');
            log.error(e);
            response.contentType = CONTENT_TYPE_JSON;
            print({"ok" : false, "message" : "Permission denied", "report" : {"failed" : true, "name" : ["You are not allowed to edit at this stage"]}});
        }

    }

    function copyMobileApp(oldVersionArtifact, context){
        var postContext = context.post;
        var appType = context.params.type;

        var mobileValidatorModule = require('/extensions/mobileapp/validations.js');
        var newVersionModel = modelManager.getModel(appType);
        newVersionModel.import('asset', oldVersionArtifact);
        newVersionModel.set('*.id', null);
        // these attributes do not change: provider, name, platform, type, category

        if (postContext[mobileValidatorModule.Field.OVERVIEW_FILE]) {
            newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_URL,
                           postContext[mobileValidatorModule.Field.OVERVIEW_FILE]);
        } else {
            newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_URL,
                           postContext[mobileValidatorModule.Field.OVERVIEW_URL]);
        }

        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_PACKAGE_NAME,
                       postContext[mobileValidatorModule.Field.OVERVIEW_PACKAGE_NAME]);
        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_APP_ID,
                       postContext[mobileValidatorModule.Field.OVERVIEW_APP_ID]);

        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_DISPLAY_NAME,
                       postContext[mobileValidatorModule.Field.OVERVIEW_DISPLAY_NAME]);
        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_DESCRIPTION,
                       postContext[mobileValidatorModule.Field.OVERVIEW_DESCRIPTION]);
        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_RECENT_CHANGES,
                       postContext[mobileValidatorModule.Field.OVERVIEW_RECENT_CHANGES]);
        var version = postContext[mobileValidatorModule.Field.OVERVIEW_VERSION];
        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_VERSION, version);
        newVersionModel.set(mobileValidatorModule.Field.OVERVIEW_BUNDLE_VERSION, version);

        // handle images,if new image is uploaded then save it else copy the image of previous version
        var files = request.getAllFiles();
        var banner = files[mobileValidatorModule.Field.IMAGES_BANNER];
        if(banner) {
            banner = saveFile(banner);
        } else {
            var fileName = postContext[mobileValidatorModule.Field.IMAGES_OLD_BANNER].split('/').pop();
            banner = copyFile(fileName);
        }


        var icon = files[mobileValidatorModule.Field.IMAGES_THUMBNAIL];
        if(icon) {
            icon = saveFile(icon);
        } else {
            var fileName = postContext[mobileValidatorModule.Field.IMAGES_OLD_THUMBNAIL].split('/').pop();
            icon = copyFile(fileName);
        }

        var screenshot0 = files[mobileValidatorModule.Field.IMAGES_SCREENSHOT_0];
        if(screenshot0) {
            screenshot0 = saveFile(screenshot0);
        } else {
            var fileName = postContext[mobileValidatorModule.Field.IMAGES_OLD_SCREENSHOT_0].split('/').pop();
            screenshot0 = copyFile(fileName);
        }

        var screenshot1 = files[mobileValidatorModule.Field.IMAGES_SCREENSHOT_1];
        if(screenshot1) {
            screenshot1 = saveFile(screenshot1);
        } else {
            var fileName = postContext[mobileValidatorModule.Field.IMAGES_OLD_SCREENSHOT_1].split('/').pop();
            screenshot1 = copyFile(fileName);
        }

        var screenshot2 = files[mobileValidatorModule.Field.IMAGES_SCREENSHOT_2];
        if(screenshot2) {
            screenshot2 = saveFile(screenshot2);
        } else {
            var fileName = postContext[mobileValidatorModule.Field.IMAGES_OLD_SCREENSHOT_2].split('/').pop();
            screenshot2 = copyFile(fileName);
        }


        var screenshots = screenshot0+","+screenshot1+","+screenshot2;

        newVersionModel.set(mobileValidatorModule.Field.IMAGES_BANNER, banner);
        newVersionModel.set(mobileValidatorModule.Field.IMAGES_SCREENSHOTS, screenshots);
        newVersionModel.set(mobileValidatorModule.Field.IMAGES_THUMBNAIL, icon);

        // validate model
        var mobileValidator = new mobileValidatorModule.Validator(null);
        var result = mobileValidator.validateModel(newVersionModel, false);
        if (result.status != mobileValidatorModule.ValidationStatus.VALID) {
            response.status = 422; // Unprocessable Entity (WebDAV; RFC 4918)
            response.contentType = CONTENT_TYPE_JSON;
            content = {status: 'Validation Error', validationResults: result.validationResults};
            response.content = stringify(content);
            return;
        }
        // perform ES validations on the model
        result = newVersionModel.validate();
        if (result && result.failed) {
            response.status = 422;
            response.contentType = CONTENT_TYPE_JSON;
            response.content = stringify({status: "Validation Error", message: result});
            return;
        }

        // check new version already exists
        var previousVersions = [];
        try {
            var artifactManager = rxtManager.getSystemArtifactManager(appType, session);
            previousVersions = artifactManager.find(function (artifact) {
                var isSameProvider = (artifact.attributes.overview_provider ==
                                      oldVersionArtifact.attributes.overview_provider);
                var isSameName = (artifact.attributes.overview_name ==
                                  oldVersionArtifact.attributes.overview_name);
                var isSameVersion = (version == artifact.attributes.overview_version);
                return (isSameProvider && isSameName && isSameVersion);
            }, null);
        } catch (e) {
            log.error("Cannot retrieve previous versions of mobile app " +
                      oldVersionArtifact.attributes.overview_name + " by " +
                      oldVersionArtifact.attributes.overview_provider);
            log.error(e);
            // continue work flow <add more details>
        }
        if (previousVersions.length > 1) {
            response.status = 422; // Unprocessable Entity (WebDAV; RFC 4918)
            response.contentType = CONTENT_TYPE_JSON;
            var validationResults = {};
            validationResults[mobileValidatorModule.Field.OVERVIEW_VERSION] =
                "Version '" + version + "' of mobile app '"
                + oldVersionArtifact.attributes.overview_name + "' already exists.";
            content = {status: 'Validation Error', validationResults: validationResults};
            response.content = stringify(content);
            return;
        }

        try {
            newVersionModel.save();
        } catch (e) {
            log.error("Cannot create new version '" + version + "' of mobile app '"
                      + oldVersionArtifact.attributes.overview_displayName + "' from its version'"
                      + oldVersionArtifact.attributes.overview_version + "'.");
            log.error(e);
            response.status = 500;
            response.contentType = CONTENT_TYPE_JSON;
            var content = {};
            content.status = "Error";
            content.message = "Cannot create new version '" + version + "' of mobile app '"
                              + oldVersionArtifact.attributes.overview_displayName
                              + "' from its version '"
                              + oldVersionArtifact.attributes.overview_version + "'.";
            response.content = stringify(content);
            return;
        }

        try {
            var cachingAsset = newVersionModel.export('asset.exporter');
            var assetCachingModule = require('/modules/cache/cache.manager.js').assetCachingModule();
            var assetCacheManager = new assetCachingModule.AssetCacheManager(session);
            assetCacheManager.add(cachingAsset, appType);
        } catch (e) {
            log.error("Adding to cache operation failed for mobile app asset with UUID '"
                      + newVersionModel.get('*.id') + "'.");
            log.error(e);
        }

        // everything went great
        response.status = 200;
        response.contentType = CONTENT_TYPE_JSON;
        response.content = stringify({status: "Success"});

    }

    /******************************END_MOBILE***************************************************/


    var securityModule = require('/modules/security/security.manager.js').securityManagementModule();
    var sm = securityModule.cached();

    //This will short circuit the handling of the requests
    var passed = sm.check(session, function () {
        response.sendError(401);

    });

    //Stop servicing the request if the check failed
    if (passed) {
        var user = require('store').user;
        var publisher = require('/modules/publisher.js').publisher(request, session);
        var rxtManager = publisher.rxtManager;
        var modelManager = publisher.modelManager;
        var dataInjector = publisher.dataInjector;
        var DataInjectorModes = publisher.DataInjectorModes;
        var filterManager = publisher.filterManager;
        var storageModule = require('/modules/data/storage.js').storageModule();
        var storageConfig = require('/config/storage.json');
        var utility = require('/modules/utility.js').rxt_utility();
        routeManager.handle(request, response);
    }

}, request, response, session);

/**
 Attach given tags to given asset
 @tags - comma separated tags value
 @assetId - app id
 @rxtManager
 @type - apptype e.g mobileapp
 **/

function addTags(tags, assetId, rxtManager, type) {
    //Only proceed if there are any tags
    if (tags.length == 0) {
        log.debug("No tags to add to asset with id " +assetId);
        return;
    }

    //Obtain the artifact
    var artifactManager = rxtManager.getArtifactManager(type);
    var asset = artifactManager.get(assetId);

    var path = asset.path;
    tags = tags.split(',');

    //Attach the tags
    rxtManager.registry.tag(path, tags);
}

/**
 Update given tags to given asset
 @newTags - comma separated tags value
 @assetId - app id
 @rxtManager
 @type - apptype e.g mobileapp
 **/
function updateTags(newTags, assetId, rxtManager, type) {

    //Obtain the artifact
    var artifactManager = rxtManager.getArtifactManager(type);
    var asset = artifactManager.get(assetId);

    var path = asset.path;
    var oldTags = rxtManager.registry.tags(path);

    //Remove old tags
    rxtManager.registry.untag(path, oldTags);
    //add New Tags
    addTags(newTags, assetId, rxtManager, type);
    log.debug("Tags added visibility");
}


/**
 Update the resource permission based on given roles.
 @roles User Roles
 @assetId Asset UUID
 @rxtManager Rxt Manager
 @type Type of the Asset
 **/
function updateVisibility(roles, assetId, rxtManager, type) {
    if (roles.length == 0) {
        log.debug("No roles found to add to asset with id " + assetId);
        return
    }
    var permissions = [];
    var roles = roles.split(',');
    for (var i = 0; i < roles.length; i++) {
        var permision = {"role": roles[i], "permissions": ["GET"]};
        permissions.push(permision)
    }
    var artifactManager = rxtManager.getArtifactManager(type);
    require("../../assets/default/asset.jag").overridePermissions(assetId, artifactManager, permissions);
    log.debug("Updated role visibility");
}

function url_reg(){
    return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(url_reg.arguments[0]);
}



%>
