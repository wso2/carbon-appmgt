<%
/*
 Description: The controller is used to handle the tagging operations
 GET /api/tag/{type}/        Get all of the tags for a type
 GET /api/tag/{type}/{id}    Get all tags associated with an asset
 PUT /api/tag/{type}/{id}    Add a tag to a given asset (or tags)
 DELETE /api/tag/{type}/{id} Remove a tag from a given asset (or multiple tags)
 Filename: tags_api_router.jag
 Created Date: 3/10/2013
 */

require('/modules/publisher.js').exec(function(ctx) {

var config = require('/config/publisher.json');
var caramel = require('caramel');
var utility = require('/modules/utility.js').rxt_utility();
var permissions = require('/modules/permissions.js').permissions;

var router = require('/modules/router-g.js').router();
var routeManager = new router.Router();


var log = new Log('tags.api.router');

var TAG_QUERY = '/_system/config/repository/components/org.wso2.carbon.registry/queries/allTags';



routeManager.register('GET', 'publisher', '/publisher/api/tag/{type}', function (context) {

    var type = context.params.type;

    var tags = rxtManager.registry.query(TAG_QUERY);

    log.debug('tags retrieved: ' + tags);

    var tagManager = new tagModule.TagManager();

    tagManager.process(tags);

    tags = tagManager.get(type);
    response.contentType = "application/json";
    print(tags);
});



routeManager.register('GET', 'publisher', '/publisher/api/tag/{type}/{id}', function (context) {

    var type = context.params.type;
    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(type);

    var artifact = artifactManager.get(id);

    //Obtain the path of the asset
    var path = artifact.path;

    //Obtain the tags
    var tags = rxtManager.registry.tags(path);

    //Create a tag array
    var counter = 0;
    var tagArray = [];

    for (var index in tags) {
        tagArray.push({id: counter, name: tags[index]});
        counter++;
    }
    response.contentType = "application/json";
    print(tagArray);
});

routeManager.register('PUT', 'publisher', '/publisher/api/tag/{type}/{id}', function (context) {

    var type = context.params.type;
    var id = context.params.id;
    var contentType = "application/json";

    log.debug(context.content);

    //Get the tag array
    var tags = context.content.tags || [];

    var msg = {};
    msg['status'] = 200;
    msg['ok'] = true;
    msg['action'] = null;

    var userManager = server.userManager(server.current(session).tenantId);
    var user = server.current(session);
    var permission = null;

    if (type == 'webapp') {
        permission = config.permissions.webapp_create;
    } else if (type == 'mobileapp') {
        permission = config.permissions.mobileapp_create;
    }
    // check whether user has app create permission.
    var hasPermission = permissions.isAuthorized(user.username, permission, userManager);
    if (!hasPermission) {
        response.status = 403;
        response.contentType = contentType;
        msg.status = "403";
        msg.ok = false;
        msg.action = "User '" + user.username + "' doesn't have enough privileges to add tags";
        print(msg);
        return;
    }

    //If tags are not specified.
    if (tags.length == 0) {
        response.contentType = contentType;
        msg.action = "No tags are specified.";
        print(msg);
        return;
    }

    var artifactManager = rxtManager.getArtifactManager(type);
    try {
        var artifact = artifactManager.get(id);
        var model = modelManager.getModel(type);
        model.import('asset', artifact);
        var report = model.validate();
        //Check if the model is valid, the important validation here is checking if the asset is in the published state
        if ((report) && (report.failed)) {
            response.status = 500;
            response.contentType = contentType;
            msg.status = "500";
            msg.ok = false;
            msg.action = "Unable to attach tag";
            print(msg);
            return;
        }

        //Apply the tags
        rxtManager.registry.tag(artifact.path, tags);
        response.contentType = contentType;
        msg.action = "Tags are added successfully";
        print(msg);
    }  catch (e) {
        response.contentType = contentType;
        response.status = 404;
        msg.status = "404";
        msg.ok = false;
        msg.action = "The asset with id: " + id + " could not be found";
        print(msg);
    }
});

routeManager.register('DELETE', 'publisher', '/publisher/api/tag/{type}/{id}/{tag}', function (context) {

    var type = context.params.type;
    var id = context.params.id;
    var tag = context.params.tag;

    var artifactManager = rxtManager.getArtifactManager(type);

    var artifact = artifactManager.get(id);

    var msg = {};
    msg['status'] = 200;
    msg['ok'] = true;

    var model = modelManager.getModel(type);
    model.import('asset', artifact);

    var report = model.validate();

    //Check if the model is valid, the important validation here is checking if the asset is in the published state
    if ((report) && (report.failed)) {
        response.sendError(404, 'Unable to remove the tag');
        return;
    }


    rxtManager.registry.untag(artifact.path, tag);
    response.contentType = "application/json";
    print(msg);
});

var securityModule = require('/modules/security/security.manager.js').securityManagementModule();

var sm = securityModule.cached();

//This will short circuit the handling of the requests
var passed = sm.check(session, function () {
    response.sendError(401);
});

//Stop servicing the request if the check failed
if (passed) {

    var store = require('store');
    var user = store.user;
    var server = store.server;
    var publisher = require('/modules/publisher.js').publisher(request, session);

    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;
    var tagModule = require('/modules/tag.management.js').tagModule();
    routeManager.handle(request, response);
}

}, request, response, session);

%>
