<%

include("/extensions/webapp/modules/jagg/jagg.jag");
require('/modules/publisher.js').exec(function(ctx) {

    var config = require('/config/publisher.json');
    var caramel = require('caramel');

    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    
    
    routeManager.register('GET', 'publisher', '/publisher/api/sso/{type}', function (context) {

        var shortName = context.params.type;
        if(shortName == "providers"){
            var ssoConfiguratorUtil = Packages.org.wso2.carbon.appmgt.impl.idp.sso.SSOConfiguratorUtil;
            var providers = ssoConfiguratorUtil.getAvailableProviders();
            var returnVal = createResponseObject(providers);

            print(returnVal);
        }else if(shortName == "claims"){
            var idpName = request.getParameter("idp");
            var version = request.getParameter("version");
            var returnVal;
            if(idpName === null) {
                returnVal = createResponseObjectWithReason(null, 'Query parameter \'idp\' is missing or invalid');
            } else {
                var ssoConfiguratorUtil = Packages.org.wso2.carbon.appmgt.impl.idp.sso.SSOConfiguratorUtil;
                returnVal = createResponseObject(ssoConfiguratorUtil.getAllClaims(idpName,version));
            }

            print(returnVal);

        }
    });

    routeManager.register('GET', 'publisher', '/publisher/api/sso/{providerName}/{version}/{appProvider}/{appName}/{appVersion}', function (context) {

        var shortName = context.params.type;
        var providerName = context.params.providerName;
        var providerVersion = context.params.version;
        var appProvider = context.params.appProvider;
        var appName = context.params.appName;
        var appVersion = context.params.appVersion;

        var result = null;
        var issuerName = null;

        var store = jagg.module("manager").getAPIStoreObj();
        var isEmailLoginEnabled = store.isEnableEmailUsername();

        if (!isEmailLoginEnabled && appProvider != null && appProvider.indexOf("-AT-") != -1) {
            result = appProvider.split("-AT-");
        }
        if (result != null ) {
            issuerName =  appName + "-" + result[1] + "-" + appVersion;
        } else {
            issuerName =  appName + "-" + appVersion;
        }

        var ssoConfiguratorUtil = Packages.org.wso2.carbon.appmgt.impl.idp.sso.SSOConfiguratorUtil;
        returnVal = createResponseObject(ssoConfiguratorUtil.getSSOProvider(providerName, providerVersion,issuerName));
        print(returnVal);
    });

    routeManager.register('POST', 'publisher', '/publisher/api/sso/{type}', function (context) {

        var type = context.params.type;
        //Create SSO Provider
        addSSOProvider(context.request.getContent(),type);


    });

    function addSSOProvider(params,type) {
        var WebAppModel = Packages.org.wso2.carbon.appmgt.api.model.WebApp;
        var APIIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
        var SSOProvider = Packages.org.wso2.carbon.appmgt.api.model.SSOProvider;

        var appId = new APIIdentifier(params.sso_idpProviderUrl, params.app_name, params.app_verison);
        var webApp = new WebAppModel(appId);
        webApp.setAcsURL(params.app_acsURL);
        var ssoProvider = new SSOProvider();
        var store = jagg.module("manager").getAPIStoreObj();

        var tenantDomain = Packages.org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getTenantDomain();
        var tenantIdVal = Packages.org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getTenantId();

        ssoProvider.setProviderName(params.provider.split("-")[0]);
        ssoProvider.setProviderVersion(params.provider.split("-")[1]);

        if (tenantIdVal != '-1234') {
            ssoProvider.setIssuerName(params.app_name + "-" + tenantDomain + "-" + params.app_verison);
        } else {
            ssoProvider.setIssuerName(params.app_name + "-" + params.app_verison);
        }

        ssoProvider.setClaims(params.claims);

        if(params.logout_url != null && params.logout_url != ' '){
            ssoProvider.setLogoutUrl(params.logout_url);
        }

        webApp.setSsoProviderDetails(ssoProvider);
        webApp.setContext(params.app_context);
        webApp.setTransports(params.app_transport);

        var ssoConfigUtil = Packages.org.wso2.carbon.appmgt.impl.idp.sso.SSOConfiguratorUtil;
        if(type == 'editConfig'){
            ssoConfigUtil.createSSOProvider(webApp, true);
        }else {
            ssoConfigUtil.createSSOProvider(webApp, false);
        }
    }
    
    function createResponseObject(object) {
        response.contentType = "application/json";
        if (object !== null) {
            return {'success': true, 'response': object};
        } else {
            return {'success': false, 'response': object};
        }
    }

    function createResponseObjectWithReason(object, reason) {
        var returnVal = createResponseObject(object);
        returnVal.reason = reason;
        return returnVal;
    }

    var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

    var sm=securityModule.cached();

	//This will short circuit the handling of the requests
    var passed=sm.check(session,function(){
        response.sendError(401);

    });

	//Stop servicing the request if the check failed
    if(passed){

        var user=require('store').user;
        var publisher = require('/modules/publisher.js').publisher(request, session);

	//var routeManager=application.get(config.app.ROUTE_MANAGER);
        var rxtManager = publisher.rxtManager;
        var modelManager = publisher.modelManager;
        var dataInjector=publisher.dataInjector;
        var DataInjectorModes=publisher.DataInjectorModes;
        var filterManager=publisher.filterManager;
        var storageModule = require('/modules/data/storage.js').storageModule();
        var storageConfig = require('/config/storage.json');
        var utility = require('/modules/utility.js').rxt_utility();
        var log=new Log();



        routeManager.handle(request, response);
    }

}, request, response, session);

%>
