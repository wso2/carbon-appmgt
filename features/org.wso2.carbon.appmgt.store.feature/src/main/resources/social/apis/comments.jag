<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
response.addHeader("Content-Type", "application/json");
var matcher = new URIMatcher(request.getRequestURI()), method = request.getMethod();
var audutLog = require('/modules/auditLog/logger.js');

(function () {
    var userModule = require('/modules/user.js');
    var logged = userModule.current(session);

    if (logged) {
        var username = String(logged.username) + '@' + logged.tenantDomain;
        if (method == 'POST') {
            var carbon = require('carbon');
            var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');
            //Read the social.json file
            //var config=require('/configs/social.json');
            //social.configPublisher(config.dataPublisherConnectionInfo);
            var activity = JSON.parse(request.getParameter('activity'));
            activity.actor = {"id": username, "objectType": "person"};
            var id = social.publish(JSON.stringify(activity));

            var result = {
                success: Boolean(id),
                id: id
            };
            //TODO get api verifier
            var parameters = request.getAllParameters();
            var name = parameters.name;
            var version = parameters.version;
            var provider = parameters.provider;
            var storeTenantDomain = parameters.storeTenantDomain;
            var userName = user.username;
            audutLog.writeLog(logged.tenantDomain.tenantId, username, "UserReviewedAnApplication","Webapp", "{" +
                                                                                                            "providerName='" + provider + '\'' +
                                                                                                            ", apiName='" +  name + '\'' +
                                                                                                            ", version='" + version + '\'' +
                                                                                                            '}' , "", "");
            print(result);
        } else {
            var carbon = require('carbon');
            var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');
            var ret = social.removeActivity(request.getParameter('id'), username);

            var result = {
                success: ret
            };

            print(result);
        }
    } else {
        response.sendError(401);
    }
})();
%>
