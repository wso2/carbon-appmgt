<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

var matcher = new URIMatcher(request.getRequestURI());
var carbon = require('carbon');
var configs = require('/config/store.json');

var store = '/{context}/t/{domain}/';
var apiEndpoint = store + 'apis/assets/{type}/{+suffix}';
var assetEndpoint = store + 'assets/{type}';
var topAssetPage = store + 'assets/';
var assetsEndpoint = store + 'assets/{type}/{+suffix}';
var extensionsEndpoint = store + 'extensions/assets/{type}/{+suffix}';
var storageEndpoint = store + 'storage/{+suffix}';
var storeLogin = store + 'login';
var path;
var log = new Log();

var mapper = function (path) {
    return function () {
        return path;
    };
};

var getReferer = function () {
    var contextPath = caramel.configs().context,
            reversProxyEnabled = caramel.configs().reverseProxyEnabled,
            reverseProxyHost = caramel.configs().reverseProxyHost;
    var referer = request.getHeader("referer");
    if (!referer) {
        if (reversProxyEnabled) {
            referer = request.getRequestURI();
            var context = request.getContextPath();
            referer = contextPath + referer.substring(context.length);
            referer = reverseProxyHost + referer;
        } else {
            referer = request.getRequestURL();
        }
    }
    return referer;
};

var getRedirectURL = function (url) {
    var contextPath = caramel.configs().context,
            reversProxyEnabled = caramel.configs().reverseProxyEnabled,
            reverseProxyHost = caramel.configs().reverseProxyHost;
    var redirectURL = contextPath + url;
    if (reversProxyEnabled) {
        redirectURL = reverseProxyHost + contextPath + url;
    }
    return redirectURL;
};

(function(){

if (!session.get("Loged")) {
    var referer = getReferer();
    var requestURL = request.getRequestURL();
    referer = (requestURL ? requestURL : referer);
    var loginRelativeUrl = encodeURI("/login?referer=" + referer);
    response.sendRedirect(getRedirectURL(loginRelativeUrl));
    return;
}

//Check for incoming URL pattern and dispatch the request into relevant endpoint
if (matcher.match(apiEndpoint)) {

    var elements = matcher.elements();
    path = '/apis/assets.jag';
    resolveRouter(elements.domain, path, elements.type);

} else if (matcher.match(assetEndpoint) || matcher.match(assetsEndpoint)) {

    var elements = matcher.elements();
    path = '/controllers/routers/assets.jag';
    if(elements.type == "favourite") {
        path = '/controllers/favouriteapps.jag';
    }
    resolveRouter(elements.domain, path, elements.type);

} else if (matcher.match(storageEndpoint)) {

    var elements = matcher.elements();
    path = '/controllers/routers/storage_router.jag';
    resolveRouter(elements.domain, path, null);

} else if (matcher.match(extensionsEndpoint)) {

    var elements = matcher.elements();
    path = '/controllers/routers/extensions.jag';
    resolveRouter(elements.domain, path, elements.type);

} else if (matcher.match(storeLogin)) {
    var elements = matcher.elements();
    path = '/controllers/login.jag';
    resolveRouter(elements.domain, path, null);

} else if (matcher.match(store) || matcher.match(topAssetPage)) {
    var elements = matcher.elements();
    path = '/controllers/home.jag';
    resolveRouter(elements.domain, path, null);

}
else {
    response.sendError(404, 'Tenant Domain not found');
}

}());

/*
 The function is used to validate the activeness or existence of requested tenant and resolve the router.
 If the tenant domain is active and available, then the request will be routed to the relevant router or else
 an error will be thrown
 @tenantDomain: Incoming URI tenant domain
 @path : Router path
 */
function resolveRouter(tenantDomain, path, type) {

    if (type == 'site') {
        include('/extensions/assets/site/modules/jagg/jagg.jag');
    }
    if (type == "favourite") {
        include('/jagg/jagg.jag');
    } else {
        include('/extensions/assets/webapp/modules/jagg/jagg.jag');
    }

    var storeHostObj = jagg.module("manager").getAPIStoreObj();
    var isActivated = storeHostObj.isTenantActive(tenantDomain);

    if (isActivated) {
        request.getMappedPath = mapper(path);
        include(path);
    } else {
        log.error("Tenant domain : " + tenantDomain + " not found");
        response.sendError(404, 'Invalid tenant domain found');
    }
}
%>