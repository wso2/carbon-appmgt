<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var caramel;
var SubscriptionService;
var subsApi;
var AuthService;
var authenticator;
var log = new Log('subscriptions : ');
var carbon = require('carbon');

include('../modules/jagg/jagg.jag');

require('/modules/store.js').exec(function (ctx) {
    var store = ctx.store;
    var sso = ctx.sso;
    tenantId = ctx.tenantId;
    site = ctx.site;
    caramel = require('caramel');
    search = require('/modules/search.js');
    social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');

    var SITE_QUERY = {"overview_treatAsASite": "TRUE"};
    var RECENT_ASSET_COUNT = store.getRecentAppCount().myAppsPage;

    SubscriptionService = require(getServiceDir('subscription.js')).serviceModule;
    subsApi = new SubscriptionService.SubscriptionService();
    subsApi.init(jagg, session);
    AuthService = require(getServiceDir('authentication.js')).serviceModule;
    authenticator = new AuthService.Authenticator();
    authenticator.init(jagg, session);

    var AppInformationService = require('../services/app-information.js').serviceModule;
    var appInfoManager = new AppInformationService.AppInformationService();
    appInfoManager.init(jagg, session);
    var subscriptions = [];
    var userData = authenticator.getLoggedInUser();
    var apps = subsApi.getAppsWithSubs({user: userData.username});

    //If the user is not logged in, redirect to the login page
    caramel = require('caramel');
    var contextPath = caramel.configs().context;
    var reversProxyEnabled = caramel.configs().reverseProxyEnabled;
    var reverseProxyHost = caramel.configs().reverseProxyHost;
    var reDirectUrl = contextPath;
    if(reversProxyEnabled) {
        reDirectUrl = reverseProxyHost+contextPath;
    }
    if (userData == null) {
        response.sendRedirect(reDirectUrl);
        return;
    }

    if (apps.length > 0) {

        subscriptions = apps[0].subscriptions;
        var PAGE_SIZE = store.getPageSize();
        var appsCount;
        var pages;
        var page = parseInt(request.getParameter('page'));
        if (!page) page = 1;
        var limit = page * PAGE_SIZE;
        var offset = limit - PAGE_SIZE - 1;
        var displayApps = [];
        var siteAssets = [];



        //Remove none site assets form the asset[].
        for (i = 0; i < apps[0].subscriptions.length; i++) {
            var asset = store.asset(type, apps[0].subscriptions[i].uuid);
            var treatAsASite = asset.attributes.overview_treatAsASite;
            if (treatAsASite) {
                if (treatAsASite.toLowerCase() == "true") {
                    siteAssets.push(apps[0].subscriptions[i]);
                }
            }
        }

        for (i = 0; i < siteAssets.length; i++) {
            var app = appInfoManager.getAppDescription(siteAssets[i].provider, siteAssets[i].name, siteAssets[i].version);
            siteAssets[i].productionURL = app.serverURL.productionURL;

            if ((i > offset && i < limit)) {
                displayApps.push(siteAssets[i]);
            }
        }

        apps[0].subscriptions = displayApps;

        appsCount = siteAssets.length;
        pages = Math.ceil(appsCount / PAGE_SIZE);

        //If pagination, next and previous button
        var leftNav = null;
        var rightNav = null;
        if (pages == 1) {
            leftNav = false;
            rightNav = false;
        } else if(page == 1 && pages > 1) {
            leftNav = false;
            rightNav = page + 1;
        } else if (page == pages && pages > 1) {
            leftNav = page - 1;
            rightNav = false;
        } else {
            leftNav = page - 1;
            rightNav = page - 1;
        }
    }

    var recentAssets = store.recentAssets('webapp', RECENT_ASSET_COUNT, SITE_QUERY);
    for (var i = 0; i < recentAssets.length; i++) {
        var appRatingRecentAssets = JSON.parse(social.getRating(WEBAPP_TYPE + ':' + recentAssets[i].id));
        if (appRatingRecentAssets) {
            recentAssets[i].rating = {
                average: Math.floor(appRatingRecentAssets.rating)
            };
        } else {
            recentAssets[i].rating = 0;
        }
    }

    caramel.render({
        header: {
            user: userData,
            sso: sso
        },
        navigation: site.navigation(tenantId),
        search: {
            search: {title: type},
            isTopAssets: false,
            searchFields: search.fields()
        },
        sso: sso,
        appsWithSubs: apps,
        pages: pages,
        page: page,
        leftNav: leftNav,
        rightNav: rightNav,
        metadata: {
            appsWithSubs: apps
        },
        recentAssets: recentAssets
    }, request, response, session);

}, request, response, session);


function getServiceDir(serviceName) {
    return '../services/' + serviceName;
}

%>

