<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
        (function () {
            include("jagg.jag");
            var site = require("/site/conf/site.json");
            var log = new Log();
            var samlResponse = request.getParameter("SAMLResponse");
            var sessionId = session.getId();
            var samlRequest = request.getParameter("SAMLRequest");
            // Create a sso relying party js object.
            var security = require("sso");
            var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
            var isLogoutResponse = false;
            var isLogoutRequest = false;

            // If SAML response is not a log out response.
            if (samlResponse != null) {
                isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);
                if (!Boolean(isLogoutResponse)) {
                    // Relay state value should be a valid value, this value is mapped with request URI.
                    var relayState = request.getParameter("RelayState");

                    var requestedURI = ssoRelyingParty.getRelayStateProperty(relayState);
                    if (requestedURI == null) {
                        log.error("Relaystate value is invalid.");
                        response.sendRedirect("../error.jag");
                        return;
                    }

                    // Validating the signature.
                    if (site.ssoConfiguration.responseSigningEnabled === 'true') {
                        var fullUserName = ssoRelyingParty.getSAMLResponseNameId(samlResponse);
                        if (fullUserName != null && fullUserName.indexOf("@") != -1) {
                            var domainName = fullUserName.split("@")[1];
                            jagg.module("manager").loadTenantRegistry(domainName);
                        }

                        var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
                        if (!Boolean(isSignatureValid)) {
                            log.error("SAML response signature is verification failed.");
                            response.sendRedirect("../error.jag");
                            return;
                        }
                    }
                    ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse);
                    session.put("showLogin", "false");
                    var api = jagg.module("site");
                    var isUserPermitted = api.hasUserPermissions(ssoRelyingParty.getLoggedInUser(sessionId));
                    jagg.setUser({username: ssoRelyingParty.getLoggedInUser(sessionId), cookie: null});
                    session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));
                    //First check whether user is having sufficent permissions [create/publish].
                    if (!isUserPermitted.permitted) {
                        response.sendRedirect("../site/pages/logout.jag");
                    } else {
                        var username = ssoRelyingParty.getLoggedInUser(sessionId);
                        var manager = jagg.module("manager");
                        var store = manager.getAPIStoreObj();
                        var subscriber = store.getSubscriber(username);
                        if (!subscriber) {
                            store.addSubscriber(username);
                            subscriber = store.getSubscriber(username);
                        }
                        session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));

                        response.sendRedirect(requestedURI);
                    }
                } else {
                    // If the SAML response is log out request from IDP, we log out from web app.
                    ssoRelyingParty.invalidateSessionBySessionId(sessionId);
                    jagg.setUser(null);
                    session.invalidate();
                    response.sendRedirect("../");
                    return;
                }

            }

            // If saml request is a log out request, then invalidate session.
            if (samlRequest != null) {
                isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
                if (Boolean(isLogoutRequest)) {
                    ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
                    jagg.setUser(null);
                    session.invalidate();
                }
            }

        }());
%>
</body>
</html>

