<%
include('/extensions/assets/webapp/modules/jagg/jagg.jag');
var manager = jagg.module("manager");
var storeHostObj = manager.getAPIStoreObj();
if(!storeHostObj.isAssetTypeEnabled("mobileapp")) {
    response.sendError(404,'Resource does not exist');
}

var caramel;


require('/modules/store.js').exec(function (ctx) {
    var count, title,
            log = ctx.log,
            query = ctx.params.query,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            types = store.assetTypes(),
            utility = require('/modules/util.js'),
            mdm = require('/extensions/assets/mobileapp/modules/mdm.js').module,
            mdmConfig = parse(String((new Packages.org.wso2.carbon.appmgt.mobile.store.MDMConfig()).getConfigs()));
            devicesClass = new Packages.org.wso2.carbon.appmgt.mobile.store.Devices();

    var isNotCatalog = mdmConfig.IsCatalog == "true" ? false : true;

     var mdmUIConfig  = {enabled : isNotCatalog};


    if(!mdmUIConfig.enabled) {
        response.sendRedirect("404");
        return;
    }

    var selfUnsubscription = mdmConfig.EnableSelfUnsubscription == "true" ? true : false;
    var isDeviceSubscriptionEnabled = mdmConfig.EnableSubscriptionFromDevices == "true" ? true : false;
    //Get the list of enabled app types
    var enabledTypeList = storeHostObj.getEnabledAssetTypeList();
    //Get the subscription configuration options
    var subscriptionUtil = require('../../../../themes/store/js/subscription-config.js');
    var isSelfSubscriptionEnabled = subscriptionUtil.isSelfSubscriptionEnabled();
    var isEnterpriseSubscriptionEnabled = subscriptionUtil.isEnterpriseSubscriptionEnabled();

     var devices = [];
        if(user != null && isNotCatalog && isDeviceSubscriptionEnabled){
                devices =  parse(String(devicesClass.getDevicesList(stringify(user), user.tenantId, "user", [user.username])));
        }


    caramel = require('caramel');

    var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);

    if (!user) {
        response.sendRedirect(caramel.configs().context);
        return;
    }
    var RECENT_ASSET_COUNT = store.getRecentAppCount().assetsPage;
    var recentAssets = store.recentAssets(type, RECENT_ASSET_COUNT);

    var subscriptions = {mobileapp: []};
    var searchQuery = {search: "", searchTerm: "overview_name"};
    if (query) {
        var array = query.split(":");
        var searchOption = array[0];
        var searchValue = array[1].replace(/\"/g, "");// replace all the occurrences of double quote with empty
        var searchAttribute = "overview_name";

        if (searchOption.toLowerCase() == "category") {
            searchAttribute = "overview_category";
            searchQuery.searchTerm = "overview_category";
        } else if (searchOption.toLowerCase() == "platform") {
            searchAttribute = "overview_platform";
            searchQuery.searchTerm = "overview_platform";
        } else if (searchOption.toLowerCase() == "provider") {
            searchAttribute = "overview_provider"
            searchQuery.searchTerm = "overview_provider";
        }
        searchQuery.search = searchValue;
        subscriptions = store.searchSubscriptions(type, searchAttribute, searchValue);
    } else {
        subscriptions = store.subscriptions(type);
    }

    count = Object.keys(subscriptions).length;
    title = store.assetLinks(type).title;
    var headerData = site.header(tenantId, {
        sso: sso,
        user: user
    });
    headerData.assetType = "mobileapp";

    caramel.render({
        'title': 'My Apps | Store',
        user: user,
        sso: sso,
        header: headerData,
        navigation: site.navigation(tenantId),
        devices: devices,
        type: type,
        search: {
            query: searchQuery
        },
        userAssets: count > 0 ? subscriptions : null,
        recentAssets: recentAssets,
        myAssets: { user: user, type: type, title: title},
        selfUnsubscription : selfUnsubscription,
        isDeviceSubscriptionEnabled : isDeviceSubscriptionEnabled,
        tags: {
            data: store.tags(type, null)
        },
        assetType: "mobileapp",
        config: {
            isSelfSubscriptionEnabled: isSelfSubscriptionEnabled,
            isEnterpriseSubscriptionEnabled: isEnterpriseSubscriptionEnabled,
            enabledTypeList: enabledTypeList
        }
    });
}, request, response, session);
%>