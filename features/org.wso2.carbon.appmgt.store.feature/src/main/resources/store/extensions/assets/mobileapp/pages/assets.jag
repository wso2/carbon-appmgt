<%
var caramel;

include('/extensions/assets/webapp/modules/jagg/jagg.jag');
var manager = jagg.module("manager");
var storeHostObj = manager.getAPIStoreObj();
if(!storeHostObj.isAssetTypeEnabled("mobileapp")) {
    response.sendError(404,'Resource does not exist');
}

require('/modules/store.js').exec(function (ctx) {
    var options, assets, paging, current, total, url, mainPage, subPage, title, selectedCategory, selectedPlatform, key,
            log = ctx.log,
            sso = ctx.sso,
            query = ctx.params.query,
            tag = ctx.params.tag,
            store = ctx.store,
            user = ctx.user,
            server = ctx.server,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            subscriptions = {},
            subscription = false,
            avaliablePages,
            mdmConfig = parse(String((new Packages.org.wso2.carbon.appmgt.mobile.store.MDMConfig()).getConfigs())),
            social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');

            var  isNotCatalog = mdmConfig.IsCatalog == "true" ? false : true;

            var mdmUIConfig  = {enabled : isNotCatalog};


    caramel = require('caramel');
    var urlQuery,leftNav,rightNav;

    //Get the list of enabled app types
    var enabledTypeList = storeHostObj.getEnabledAssetTypeList();
    //Get the subscription configuration options
    var subscriptionUtil = require('../../../../themes/store/js/subscription-config.js');
    var isSelfSubscriptionEnabled = subscriptionUtil.isSelfSubscriptionEnabled();
    var isEnterpriseSubscriptionEnabled = subscriptionUtil.isEnterpriseSubscriptionEnabled();
   // paging = store.assetsPaging(request);
    avaliablePages = store.getAvailablePages(type,ctx.request,ctx.session);
    paging = store.assetsPagingOverrided(request);

    var PAGE_SIZE = store.getPageSize();
    var currIndex = paging.start + 1;
    var currentPage = store.getCurrentPage(currIndex);

    if (user) {
        subscriptions = store.subscriptions(type);
        if (subscriptions[type]) {
            var count = Object.keys(subscriptions[type]).length;
            if (count == 0) {
                subscriptions[type] = {};
            } else {
                subscription = true;
            }
        }
    }

    if (tag) {
        urlQuery = 'tag=' + tag + '&';
        var options= {};
        options.tag = tag;
        options.type = type;
        options.lifecycleState = ["published"];
        assets = store.taggeds(type, options, paging);
    } else if (query) {
        urlQuery = 'query=' + query + '&';
        query = require('/modules/search.js').build(query);
        options = {
            type: type,
            attributes: query
        };

        for (key in query) {
            if (query.hasOwnProperty(key) && key === 'overview_category') {
                selectedCategory = query[key];
            }
            if (query.hasOwnProperty(key) && key === 'overview_platform') {
                selectedPlatform = query[key];
            }

        }
        assets = store.search(options, paging);
    } else {
        if (paging.sort == 'popular') {
            urlQuery = 'sort=' + paging.sort + '&';
            var ratingApi = require('/modules/rating-api.js').api;
            var registry = require('store').server.systemRegistry(tenantId);
            var am = store.assetManager(type, registry);
            assets = ratingApi.getPopularAssets(type, tenantId, am, paging.start, PAGE_SIZE,
                                                null, null);
        }
        else if (paging.sort == 'usage') {
            server.privileged(function () {
                var config = require('/config/store.json');
                var userName = user ? user.username : "";
                var index = 0, maxTry = 0;
                var getNextassetSet = function () {
                    var bamService = Packages.org.wso2.carbon.appmgt.impl.dao.AppMDAO;
                    var bamServiceObj = new bamService();
                    if (log.isDebugEnabled()) {
                        log.debug("Object initialized successfully : org.wso2.carbon.appmgt.impl.dao.AppMDAO ");
                    }

                    var result = bamServiceObj.getAppsByHitCount(userName, (paging.start + index), 12, config.uiActivityPublishDataSource);
                    if (log.isDebugEnabled()) {
                        log.debug("query executed successfully to get the assets hit count");
                    }
                    index += store.getPageSize();
                    return JSON.parse(result);
                };

                assets = [];
                while (assets.length < PAGE_SIZE && maxTry < 10) {
                    maxTry++;
                    var result = getNextassetSet();
                    for (var n = 0; n < result.length && assets.length < PAGE_SIZE; n++) {
                        var aid = String(result[n].UUID);
                        try {
                            var asset = store.asset(type, aid);
                            asset.indashboard = store.isuserasset(aid, type);
                            if (configs.lifeCycleBehaviour.visibleIn.indexOf(String(asset.lifecycleState), 0) >= 0) {
                                assets.push(asset);
                            }
                        } catch (e) {
                            log.warn("error retrieving asset from store ,information might be stale in table. id=" +
                            aid);
                        }
                    }
                }
            });
        }
        else {
            if(paging.sort != "null") {
                urlQuery = 'sort=' + paging.sort + '&'
            }
            assets = store.assets(type, paging);
        }
    }

    for (var i = 0; i < assets.length; i++) {
        var uuid = assets[i].id;
        if (user) {
            //set subscription detail
            assets[i].isSubscribed = store.isSubscribed(type, uuid);
        }

        //set rating
        var ratings = JSON.parse(social.getRating("mobileapp:" + uuid));
        if (ratings) {
            assets[i].rating = Math.floor(ratings.rating);
        } else {
            assets[i].rating = 0;
        }
    }

    var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);
    var devices = [];
    //devices = devicesClass.get
    //TODO Implement devices

    /*==========Pagination Start====================*/
    // Check whether a 'next page' navigation is needed.
    // If the assets count in the current page is less than PAGE_SIZE, next page is not available.
    // Else assets should be queried to decide whether there are assets available for the next page.

    var nextPageAvailable = false;

    if (assets.length == PAGE_SIZE) {

        // Get the starting index, offset etc .. of the assumed next page.
        var nextPage = store.buildNextPage(request, avaliablePages);

        // Query the assets with the assumed 'next page'
        var nextAssetSet = store.assets(type, nextPage);

        if (nextAssetSet.length > 0) {
            nextPageAvailable = true;
        }
    }

    if (nextPageAvailable) {
        rightNav = currentPage + 1;
    }

    if (currentPage - 1 > 0) {
        leftNav = currentPage - 1;
    }

    /*=====================Pagination End================*/
    var headerData = site.header(tenantId, {
        sso: sso,
        user: user
    });
    headerData.assetType = "mobileapp";
        caramel.render({
            title: 'Store | Assets',
            user: user,
            sso: sso,
            devices: devices,
            header: headerData,
            navigation: site.navigation(tenantId),
            search: {
                query: query
            },
            type: type,
            selectedCategory: selectedCategory,
            selectedPlatform: selectedPlatform,
            tags: {
                    data:{allTags: store.tags(type), searchedTag: tag}
            },
            assets: assets,
            pagination: {
                  leftNav: leftNav,
                  rightNav: rightNav,
                  urlQuery: urlQuery
            },
            config: mdmUIConfig,
            recentAssets: store.recentAssets(type),
            assetType: "mobileapp",
            config: {
                isSelfSubscriptionEnabled: isSelfSubscriptionEnabled,
                isEnterpriseSubscriptionEnabled: isEnterpriseSubscriptionEnabled,
                enabledTypeList: enabledTypeList
            }

        });
}, request, response, session);
%>

