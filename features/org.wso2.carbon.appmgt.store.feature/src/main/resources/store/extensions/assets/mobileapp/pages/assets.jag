<%
var caramel;

require('/modules/store.js').exec(function (ctx) {
    var options, assets, paging, current, total, url, mainPage, subPage, title, selectedCategory, selectedPlatform, key,
            log = ctx.log,
            sso = ctx.sso,
            query = ctx.params.query,
            tag = ctx.params.tag,
            store = ctx.store,
            user = ctx.user,
            server = ctx.server,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            subscriptions = {},
            subscription = false,
            avaliablePages,
            mdmConfig = parse(String((new Packages.org.wso2.carbon.appmgt.mobile.store.MDMConfig()).getConfigs()));

            var  isNotCatalog = mdmConfig.IsCatalog == "true" ? false : true;

            var mdmUIConfig  = {enabled : isNotCatalog};


    caramel = require('caramel');



    url = '/assets/' + type + '/?' + (tag ? 'tag=' + tag + '&' : '') + (query ? 'query=' + query + '&' : '');

   // paging = store.assetsPaging(request);
    avaliablePages = store.getAvailablePages(type,ctx.request,ctx.session);
    paging = store.assetsPagingOverrided(request);



    mainPage = type;

    title = store.assetLinks(type).title;

    var skipIndices = false;

    var indices = [];

    if(skipIndices) {
        indices = store.pageIndexPopulator(avaliablePages, paging.start + 1);
    }

    var PAGE_SIZE = store.getPageSize();
    var pageIndices;
    if(indices.length > 1){
        pageIndices = indices;
    }

    var currIndex = paging.start + 1;

    var currentPage = store.getCurrentPage(currIndex);
    //currentPage = parseInt(currentPage, 10);

    if(currentPage-1 > 0){
        var leftnav = currentPage-1;
    }

    if (user) {
        subscriptions = store.subscriptions(type);
        if (subscriptions[type]) {
            var count = Object.keys(subscriptions[type]).length;
            if (count == 0) {
                subscriptions[type] = {};
            } else {
                subscription = true;
            }
        }
    }

    if (tag) {
        subPage = '/ Tag: "' + tag + '"';
        assets = store.tagged(type, tag, paging);
    } else if (query) {
        query = require('/modules/search.js').build(query);
        options = {
            type: type,
            attributes: query
        };

        for (key in query) {
            if (query.hasOwnProperty(key) && key === 'overview_category') {
                selectedCategory = query[key];
            }
            if (query.hasOwnProperty(key) && key === 'overview_platform') {
                selectedPlatform = query[key];
            }

        }
        subPage = '/ Search: "' + query + '"';
        assets = store.search(options, paging);

    } else {
        if (paging.sort == 'popular') {
            server.privileged(function () {
                //TODO:  move to a module.
                var tenantDomain = user ? user.tenantDomain : "carbon.super";
                var index = 0, maxTry = 0;
                var getNextassetSet = function () {
                    var db = new Database('SOCIAL_CACHE');
                    var result = db.query("SELECT ID FROM SOCIAL_CACHE WHERE TYPE='" + type.replace(/\W/g, '') + "' AND " +
                            "TENANT='" + tenantDomain + "' ORDER BY RATING DESC LIMIT " + (paging.start + index) + ",12");
                    db.close();
                    index += 12;
                    return result;
                };
                assets = [];
                var pos, aid, asset;
                while (assets.length < 12 && maxTry < 10) {
                    maxTry++;
                    var result = getNextassetSet();
                    for (var n = 0; n < result.length && assets.length < 12; n++) {
                        var combinedAid = String(result[n].ID);
                        pos = combinedAid.indexOf(':');
                        aid = combinedAid.substring(pos + 1);
                        try {
                            asset = store.asset(type, aid);
                            asset.indashboard = store.isuserasset(aid, type);
                            if (configs.lifeCycleBehaviour.visibleIn.indexOf(String(asset.lifecycleState), 0) >= 0) {
                                assets.push(asset);
                            }
                        } catch (e) {
                            log.warn("error retrieving asset from store ,information might be stale in social cache. id=" +
                                    combinedAid);
                        }
                    }
                }
            });

        }
        else if (paging.sort == 'usage') {
            //search by usage icon functionality implemented here. It will sort the assets by usage
            server.privileged(function () {
                var config = require('/config/store.json');
                var userName = user ? user.username : "";
                var index = 0, currentTry = 0, maxTry = 10;
                var getNextassetSet = function () {
                    var bamService = Packages.org.wso2.carbon.appmgt.impl.dao.AppMDAO;
                    var bamServiceObj = new bamService();
                    if (log.isDebugEnabled()) {
                        log.debug("Object initialized successfully : org.wso2.carbon.appmgt.impl.dao.AppMDAO ");
                    }

                    var result = bamServiceObj.getAppsByHitCount(userName, (paging.start + index),
                                                                 PAGE_SIZE,
                                                                 config.uiActivityPublishDataSource);
                    if (log.isDebugEnabled()) {
                        log.debug("query executed successfully to get the assets hit count");
                    }
                    index += PAGE_SIZE;
                    return JSON.parse(result);
                };

                assets = [];
                while (assets.length < PAGE_SIZE && currentTry < maxTry) {
                    currentTry++;
                    var result = getNextassetSet();
                    for (var n = 0; n < result.length && assets.length < PAGE_SIZE; n++) {
                        var assetId = String(result[n].UUID);
                        try {
                            var asset = store.asset(type, assetId);
                            asset.indashboard = store.isuserasset(assetId, type);
                            if (configs.lifeCycleBehaviour.visibleIn.indexOf(String(asset.lifecycleState), 0) >= 0) {
                                assets.push(asset);
                            }
                        } catch (e) {
                            log.warn("Error retrieving asset from store ,information might be "
                                     + "stale in table. id=" + assetId);
                        }
                    }
                }
            });
        }
        else {
            assets = store.assets(type, paging);
        }
    }
    var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);
    var devices = [];
    //devices = devicesClass.get
    //TODO Implement devices

    // Check whether a 'next page' navigation is needed.
    // If the assets count in the current page is less than PAGE_SIZE, next page is not available.
    // Else assets should be queried to decide whether there are assets available for the next page.

    var nextPageAvailable = false;

    if(assets.length == PAGE_SIZE) {

        // Get the starting index, offset etc .. of the assumed next page.
        var nextPage = store.buildNextPage(request,avaliablePages);

        // Query the assets with the assumed 'next page'
        var nextAssetSet = store.assets(type, nextPage);

        if(nextAssetSet.length > 0){
          nextPageAvailable = true;
        }
    }

    if(nextPageAvailable){
        var rightnav = currentPage+1;
    }

    caramel.render({
        title: 'Store | Assets',
        user: user,
        sso: sso,
        devices: devices,
        header: site.header(tenantId, {
            sso: sso,
            user: user
        }),
        navigation: site.navigation(tenantId),
        search: {
            mainPage: mainPage,
            subPage: subPage,
            query:query,
            isTopAssets: false,
            searchFields: rxtAttributes
        },
        type: type,
        selectedCategory: selectedCategory,
        selectedPlatform: selectedPlatform,
        tags: function () {
            return [
                {
                    url: '/assets/' + type + '/?tag=',
                    data: store.tags(type)
                }
            ];
        },
        assets: assets,
        paging: {
            url: url + 'sort=' + paging.sort + '&page=',
            sort: paging.sort,
            tag: tag,
            size: assets.length
        },
        sorting: {
            url: url + 'sort='
        },
        config : mdmUIConfig,
        myAssets : { user:user, type: type, title: title, subscriptions: subscriptions[type], subscription : subscription, pageIndices : pageIndices, leftNav:leftnav, rightNav:rightnav},
        recentAssets: store.recentAssets(type)

    });
}, request, response, session);
%>

