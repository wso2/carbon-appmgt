<%
//TODO : remove this and fix welcome page properly
//response.sendRedirect('.' + require('/store.js').config().assetsUrlPrefix + '/gadget');

var caramel;
var customType;

include('/extensions/assets/webapp/modules/jagg/jagg.jag');

require('/modules/store.js').exec(function (ctx) {
    var paging, count, current, loggedUser, manager, assets, length, recentDiff,
            popularDiff, recent, popular, type, process,
            log = ctx.log,
            query = ctx.params.query,
            tag = ctx.params.tag,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenant.tenantId || -1234,
            tenantDomain = ctx.tenant.domain,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            first = true,
            recentCount = 10,
            popularCount = 10,
            items = [],
            popularItems = [],
            recentItems = [],
            options = {},
            types = store.assetTypes(),
            search = require('/modules/search.js'),
            utility = require('/modules/util.js'),isSubscribed,
            social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');

    caramel = require('caramel');
    process = require('process'),
    localIP = "https://" + process.getProperty('server.host'),
    httpsPort = process.getProperty('https.port');

    var storeHostObj = jagg.module("manager").getAPIStoreObj();
    var isSelfSignupEnabledForTenant = storeHostObj.isSelfSignupEnabledForTenant(String(tenantDomain));

    length = types.length;
    recent = Math.floor(recentCount / length);
    recentDiff = recentCount - recent * length;
    popular = Math.floor(popularCount / length);
    popularDiff = popularCount - popular * length;
    paging = store.assetsPaging(request);
    query = query ? search.build(String(query)) : null;

    var SITE_TYPE = 'site';
    var WEBAPP_TYPE = 'webapp';
    var MOBILEAPP_TYPE = 'mobileapp';
    var siteAttribute;
    var RECENT_APP_COUNT =  Math.floor(store.getRecentAppCount().topAssetPage / length);

    // Init subscription service.
    var subscriptionServiceModule = require('/extensions/assets/webapp/services/subscription.js').serviceModule;
    var subscriptionService = new subscriptionServiceModule.SubscriptionService();
    subscriptionService.init(jagg, session);

    var getSubscriptionInfo = function (asset) {

        // Get the enterprise subscription the individual subscription for this user for this app.
        var appInfo = {};
        appInfo["name"] = asset.attributes.overview_name;
        appInfo["version"] = asset.attributes.overview_version;
        appInfo["provider"] = asset.attributes.overview_provider;

        var defaultApplicationName = "DefaultApplication";

        var enterpriseSubscription;
        if (authenticator.getLoggedInUser()) {
            enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE", authenticator.getLoggedInUser().username).subscription;
        } else {
            enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE", null).subscription;
        }

        var individualSubscription;
        if (authenticator.getLoggedInUser()) {
            individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL", authenticator.getLoggedInUser().username).subscription;
        } else {
            individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL", null).subscription;
        }

        var subscriptionInfo = {};
        subscriptionInfo["enterpriseSubscription"] = enterpriseSubscription;
        subscriptionInfo["individualSubscription"] = individualSubscription;
        return subscriptionInfo;

    }

    AuthService=require(getServiceDir('authentication.js')).serviceModule;
    authenticator=new AuthService.Authenticator();
    authenticator.init(jagg,session);
    user=authenticator.getLoggedInUser();

    //Validate user's role and send error if user is not a subscriber. 
    if (user != null) {
	var role = require('/modules/role.js').checkeRole(user.username, session);
	if (role == false) {
		log.warn('User ' + user.username + ' does not have permission to access the store application. ' +
		'Make sure the user has the subscriber role.');
		response.sendError(401, 'You do not have permission to login to this application.' +
		'Please contact your administrator and request permission.');
		return false;
	}
    }

    types.forEach(function (type) {
        //Assign requested asset type to the customType. If the requested type is 'site' then set the type variable as
        //'webapp', since we used the 'webapp' rxt for the 'site' publishing in the publisher side.
        customType = type;
        if (type == SITE_TYPE) {
            type = WEBAPP_TYPE;
        }
        manager = store.rxtManager(customType, session);

        var isMultipleVersionDisplayEnabled = storeHostObj.isDisplayMultipleVersionsEnabled();
        if (log.isDebugEnabled()) {
            log.debug("Multiple version display in store is : " + isMultipleVersionDisplayEnabled);
        }
        if (query) {
            assets = store.search({
                attributes: query,
                tag: tag,
                type: type
            }, paging);
        } else if (tag) {
            assets = store.tagged(type, tag, paging);
        } else {
            if (customType == MOBILEAPP_TYPE) {
                assets = store.assets(customType, paging);
            } else {
                if (customType == SITE_TYPE) {
                    if (isMultipleVersionDisplayEnabled) {
                        //if multiple versions to be displayed don't consider default version
                        siteAttribute = {"overview_treatAsASite": "TRUE"};
                    } else {
                        siteAttribute = {
                            //if multiple versions to be displayed do consider default version
                            "overview_treatAsASite": "TRUE",
                            "overview_makeAsDefaultVersion": "true"
                        };
                    }
                } else if (customType == WEBAPP_TYPE) {
                    if (isMultipleVersionDisplayEnabled) {
                        //if multiple versions to be displayed don't consider default version
                        siteAttribute = {"overview_treatAsASite": "FALSE"};
                    } else {
                        //if multiple versions to be displayed do consider default version
                        siteAttribute = {
                            "overview_treatAsASite": "FALSE",
                            "overview_makeAsDefaultVersion": "true"
                        };
                    }
                }
                var siteOption = {
                    type: type,
                    attributes: siteAttribute
                };
                assets = store.search(siteOption, paging);
            }
        }


        var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);

        if(type == WEBAPP_TYPE) {

            var subscriptionInfo;
            assets.forEach(function (asset) {
                // set default thumbnail
                setDefaultThumbnail(asset);

                //set rating
                if(JSON.parse(social.getRating("webapp:" + asset.id))){
                    asset.rating = Math.floor(JSON.parse(social.getRating("webapp:" + asset.id)).rating);
                }else{
                    asset.rating = 0;
                }


                isSubscribed = false;
                //set subscription details for each asset
                subscriptionInfo = getSubscriptionInfo(asset)
                if (subscriptionInfo.individualSubscription) {
                    if (subscriptionInfo.individualSubscription.subscriptionStatus === "UNBLOCKED") {
                        isSubscribed = true;
                        subscriptionInfo.individualSubscription["OnHold"] = false;
                    } else if (subscriptionInfo.individualSubscription.subscriptionStatus === "ON_HOLD") {
                        subscriptionInfo.individualSubscription["OnHold"] = true;
                    } else {
                        subscriptionInfo.individualSubscription["OnHold"] = false;
                    }
                }
                asset.isSubscribed = isSubscribed;

                //to support skip gateway label visibility
                if (asset.overview_skipGateway == "true") {
                    asset.overview_skipGateway = true;
                }
                else {
                    asset.overview_skipGateway = false;
                }

            });
        }
        items.push({
            assets: assets,
            plural: manager.pluralLabel,
            singular: manager.singularLabel,
            type: manager.shortName
        });

        //Top asset recent app populating logic.
        if (customType == MOBILEAPP_TYPE) {
            popularItems = popularItems.concat(store.popularAssets(type, RECENT_APP_COUNT));
            recentItems = recentItems.concat(store.recentAssets(type, RECENT_APP_COUNT));
        } else {
            popularItems = popularItems.concat(store.popularAssets(type, RECENT_APP_COUNT, siteAttribute));
            recentItems = recentItems.concat(store.recentAssets(type, RECENT_APP_COUNT, siteAttribute));
        }

        for (var i = 0; i < recentItems.length; i++) {
            var recentItem = recentItems[i];
            // set default thumbnail
            setDefaultThumbnail(recentItem);
            // set ratings
            var appRatingRecentAssets = JSON.parse(social.getRating(WEBAPP_TYPE + ':' + recentItem.id));
            if (appRatingRecentAssets) {
                recentItem.rating = Math.floor(appRatingRecentAssets.rating);
            } else {
                recentItem.rating = 0;
            }
        }

        first = false;
    });

    var headerData = site.header(tenantId, {
        sso: sso,
        user: user,
        isSelfSignUpEnabledForTenant : isSelfSignupEnabledForTenant
    });
    headerData.isSelfSignUpEnabledForTenant = isSelfSignupEnabledForTenant;
    headerData.domain = tenantDomain;

    caramel.render({
        title: 'Store | WSO2 App Manager',
        user: user,
        sso: sso,
        header: headerData,
        navigation: site.navigation(tenantId),
        search: {
            title: "Top Assets",
            isTopAssets: true,
            searchFields: search.fields()
        },
        topAssets: {
            assets: items,
            popularAssets: popularItems
        },
        config:{
        	localIP : localIP,
        	httpsPort : httpsPort
        },
        tags: {
            url: '/assets/' + type + '?page=1&tag=',
            data: store.tags(type)
        },
        recentAssets: recentItems
        // type: type,  tag: tag,
    });
}, request, response, session);

function getServiceDir(serviceName) {
    return '/extensions/assets/webapp/services/' + serviceName;
}

/**
 * Sets the default thumbnail of the specified asset.
 * @param asset {Object} asset
 */
function setDefaultThumbnail(asset) {
    var assetThumbnail = asset.attributes.images_thumbnail;
    if (!assetThumbnail || (assetThumbnail.trim().length == 0)) {
        asset.defaultThumbnail = storeHostObj.getDefaultThumbnail(asset.attributes.overview_displayName);
    }
}
%>
