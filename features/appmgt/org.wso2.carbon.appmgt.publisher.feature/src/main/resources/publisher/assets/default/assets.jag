<%
//print('Default assets file');

/*
 Description: Provides CRUD operations on groups of assets
 GET api/assets		      	 : Returns  a list of all asset types
 GET api/assets/{type}            : Returns  a list of all assets
 GET api/assets/{type}/{pageSize} : Returns  a paged list of assets
 Filename:assets.js
 Created Date: 29/7/2013
 */

require('/modules/publisher.js').exec(function(ctx) {

var router = require('/modules/router-g.js').router();
var config = require('/config/publisher.json');
caramel = require('caramel');
var server = require('store').server;
var publisher = require('/modules/publisher.js').publisher(request, session);

var routeMnger = new router.Router();
//var routeManager=application.get(config.app.ROUTE_MANAGER);
var rxtManager = publisher.rxtManager;
var modelManager = publisher.modelManager;
var dataInjector=publisher.dataInjector;
var DataInjectorModes=publisher.DataInjectorModes;
var filterManager=publisher.filterManager;
var permissions=require('/modules/permissions.js').permissions;

var log=new Log();

var PAGE_SIZE = config.paginationConfig.PAGE_SIZE;
//var DEFAULT_PAGIN = {'start':0, 'count':20 , 'sortOrder':'desc','sortBy': 'overview_createdtime', 'paginationLimit':1000};
var DEFAULT_PAGING = {'sortOrder':'desc','sortBy': 'overview_createdtime', 'paginationLimit':1000};

/*routeMnger.register('GET','publisher','/publisher/assets/list',function(context){

 //Print all of the rxt types
 for each(var template in rxtManager.rxtTemplates){
 print(template.shortName+'</br>');
 }

 print('root asset');
 //caramel.render({sample: {name: 'Default asset renderer'}});

 });*/
var log = new Log();

/**
 * Returns all the artifacts which matchs the given criteria.
 */
var getArtifactsWithoutPagination = function(artifactManager, query, sortby, sort){

    DEFAULT_PAGING.start = 0;
    DEFAULT_PAGING.count = artifactManager.count();

    var artifacts;

    if(query) {
        artifacts = artifactManager.search(query, DEFAULT_PAGING) || [];
    } else if (sortby && sort){
        DEFAULT_PAGING.sortBy = 'overview_'+sortby;
        DEFAULT_PAGING.sortOrder = sort.toUpperCase();
        artifacts = artifactManager.search(null,DEFAULT_PAGING) || [];
    } else {
        artifacts = artifactManager.search(null, DEFAULT_PAGING) || [];
    }

    return artifacts;
}

/**
 * Returns the artifacts for the requested page.
 */
var getArtifactsInPage = function(filteredArtifacts, paginationContext){

	if(!filteredArtifacts){
		return [];
	}

    var artifactsInPage = new Array();

    var i;
    var startIndex = paginationContext.start;
    var pageSize = paginationContext.count;

    // Available elements counts in the original list, to be added to the page.
    var nAvailableElements = filteredArtifacts.length - startIndex;

    // If the available count is less than the page size, then add the available elements, else the page size.
    var elementCountTobeAdded = (nAvailableElements < pageSize) ? nAvailableElements : pageSize;

    // Add the elements to the page.
    for(i = startIndex; i < startIndex + elementCountTobeAdded; i++){
        artifactsInPage.push(filteredArtifacts[i]);
    }

    return artifactsInPage;

}

    /**
     * The function will create an array of page indices upto the page count
     * @param pageCount The max page count
     */
var pageIndexPopulator = function(pageCount,currentIndex){

    var indices = [];
    var temp={};
    for(var index=1;index<=pageCount;index++){
        temp={};
        temp.index = ''+index;
        temp.isDisabled = false;

        var pageNumber = Math.floor(currentIndex/PAGE_SIZE);
        var remainder = (currentIndex/PAGE_SIZE) % 1;
        if(remainder || pageNumber===0){
            pageNumber = pageNumber +1;
        }

        //The current page is offset by 1 as the loop starts at 1
        if(index==pageNumber){
           temp.isDisabled=true;
        }
            indices.push(temp);
    }
    return indices;
};

var getAvailablePages = function(appCount){
    var availablePages = Math.floor(appCount/PAGE_SIZE);
    var remainder = (appCount/PAGE_SIZE) % 1;
    if(remainder){
        availablePages = availablePages +1;
    }
    return availablePages;
}

var getPaginationContext = function(availablePages, page){

    var startVal;
    if(page) {
        if(page>=0) {
            var appliedPageValue;
            if(page > availablePages){
                appliedPageValue = availablePages - 1;
                startVal = PAGE_SIZE * appliedPageValue;
            } else if (page > 1) {
                appliedPageValue = page - 1;
                startVal = PAGE_SIZE * appliedPageValue;
            }else{
                startVal = 0;
            }
        }else {
            startVal = 0;
        }
    }else{
        startVal = 0;
    }

    DEFAULT_PAGING.start = startVal;
    DEFAULT_PAGING.count = PAGE_SIZE;

    return DEFAULT_PAGING;

}

var getCurrentPage = function(currentIndex){
    var pageNumber = Math.floor(currentIndex/PAGE_SIZE);
    var remainder = (currentIndex/PAGE_SIZE) % 1;

    if(remainder || pageNumber===0){
        pageNumber = pageNumber +1;
    }
    return pageNumber;
}

routeMnger.register('GET', 'publisher', '/publisher/assets/{type}/', function(context) {
	var query = request.getParameter("query");
	var sortby = request.getParameter("sortby");
	var sort = request.getParameter("sort");
    var page = request.getParameter("page");
	var type = context.params.type;

    var server  = require('store').server;
    var user = server.current(session);
	var um = server.userManager(server.current(session).tenantId);
    var createActionAuthorized = permissions.isAuthorized(user.username, config.permissions.webapp_create, um);
    var createMobileAppAuthorized = permissions.isAuthorized(user.username, config.permissions.mobileapp_create, um);
    
    try {
		//TODO: Check for valid asset types
		var artifactManager = rxtManager.getArtifactManager(type);
		
        // Fetch all artifacts for the given criteria.
        var artifactsWithNoPagination = getArtifactsWithoutPagination(artifactManager, query, sortby, sort);
        var filteredArtifacts = filterManager.filter(artifactsWithNoPagination,session) || [];

        // Get the artifacts in the requested page.        
        var filteredArtifactsCount = filteredArtifacts.length;
        var availablePages = getAvailablePages(filteredArtifactsCount);
        var paginationContext = getPaginationContext(availablePages, page);
        var artifactsInPage = getArtifactsInPage(filteredArtifacts, paginationContext);
		
		dataInjector.inject(artifactsInPage, DataInjectorModes.DISPLAY);
        
        var currIndex = paginationContext.start + 1;

        var indices = pageIndexPopulator(availablePages,currIndex);
        var pageIndices;
        if(indices.length > 1){
            pageIndices = indices;
        }

        var currentPage = getCurrentPage(currIndex);
        
        if(currentPage-1 >= 0){
            var leftnav = currentPage-1;
        }
        if(currentPage+1 <= availablePages){
            var rightnav = currentPage+1;
        }
        var sortOpposite = (sort == 'asc'? 'desc': 'asc');
        var sortIcon = (sort == 'asc'? 'down': 'up');

		caramel.render({op : 'list',cuser : server.current(session), roles : server.current(session).getRoles(),
		shortName : type,artifacts : artifactsInPage,query : query,title : type, pageIndices:pageIndices,
		leftNav:leftnav, rightNav:rightnav, createPermission:createActionAuthorized, mobileAppCreatePermission:createMobileAppAuthorized,
		sortOptions:{sortBy: sortby, sort: sortOpposite, icon: sortIcon, prevSort:sort}
		});
	} catch (e) {
		response.sendError(400, "Your request is malformed...");
		log.error(e.message);
		log.error(e.stack);
	}

	/*for each(var artifact in artifacts){
	 print(artifact.id+'<br/><br/>');
	 }*/

});


routeMnger.register('GET', 'publisher', '/publisher/assets/{operation}/{type}/', function (context) {
    var operation = (context.params.operation) || '';
    var type = context.params.type;
    if (operation == 'statistics') {
        try {
            caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

        } catch (e) {
            response.sendError(404, 'Asset type not found'); //TODO: Replace
        }

        /*for each(var artifact in artifacts){
         print(artifact.id+'<br/><br/>');
         }*/
    }
    if (operation == 'apps') {
            try {
                caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
    if (operation == 'app_sub_user') {
                try {
                    caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

                } catch (e) {
                    response.sendError(404, 'Asset type not found'); //TODO: Replace
                }

                /*for each(var artifact in artifacts){
                 print(artifact.id+'<br/><br/>');
                 }*/
    }
    if (operation == 'app-by-endpoint') {
                    try {
                        caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

                    } catch (e) {
                        response.sendError(404, 'Asset type not found'); //TODO: Replace
                    }

                    /*for each(var artifact in artifacts){
                     print(artifact.id+'<br/><br/>');
                     }*/
        }
    if (operation == 'response-time') {
                            try {
                                caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

                            } catch (e) {
                                response.sendError(404, 'Asset type not found'); //TODO: Replace
                            }

                            /*for each(var artifact in artifacts){
                             print(artifact.id+'<br/><br/>');
                             }*/
                        }
    if (operation == 'usage-page') {
            try {
                caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
         if (operation == 'cache-stat') {
                    try {
                        caramel.render({op: operation,cuser: server.current(session),shortName: type,title: type});

                    } catch (e) {
                        response.sendError(404, 'Asset type not found'); //TODO: Replace
                    }

                    /*for each(var artifact in artifacts){
                     print(artifact.id+'<br/><br/>');
                     }*/
                }
});


routeMnger.handle(request, response);

}, request, response, session);
%>
